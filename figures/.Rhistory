filtered.meta <- metares %>% filter(name==idx)
reformat_comb1 <- "Irinotecan, Bevacizumab and Panitumumab in Advanced Colorectal Cancer"
reformat_comb2 <- "Oxaliplatin, Bevacizumab and Panitumumab in Advanced Colorectal Cancer"
if (filtered.meta$fullname == reformat_comb1 ){
filtered.meta$fullname <- "Irinotecan, Bevacizumab & Panitumumab in Advanced Colorectal Cancer"
}
if (filtered.meta$fullname == reformat_comb2 ){
filtered.meta$fullname <- "Oxaliplatin, Bevacizumab & Panitumumab in Advanced Colorectal Cancer"
}
rho.model <- round(filtered.meta$rho.model, 3)
rho.upper <- round(filtered.meta$upper, 3)
rho.lower <- round(filtered.meta$lower, 3)
file <- file.path(dir.to.clin.results, idx, "results.rds")
res <- readRDS(file)
tib <- res$tib
if (sim.figs){
rho.sim <- round(filtered.meta$rho.sim, 3)
pvalue <- round(filtered.meta$p.sim, 3)
if ((pvalue==0)|(pvalue==1)){
pvalue <- format(filtered.meta$p.sim, scientific=TRUE)
}
sim <- res$y.sim
tib$drugAB <- mono(tib$drugAB)
tib$drugA <- mono(tib$drugA)
tib$drugB <- mono(tib$drugB)
sim$pfs <- mono(sim$pfs)
colnames(tib)[which(colnames(tib)=="drugA")] <- filtered.meta$A_name
colnames(tib)[which(colnames(tib)=="drugB")] <- filtered.meta$B_name
colnames(tib)[which(colnames(tib)=="drugAB")] <- "Combination"
test <- approx(sim$time, sim$pfs, tib$time)
test2 <- data.frame(time=test$x, 'Simulated Estimate'=test$y) %>% as_tibble()
test2$idx <- 1:dim(test2)[1]
intervals.na <- test2 %>% filter(!is.na(Simulated.Estimate)) %>% slice(1, n()) %>% pull(idx)
if (intervals.na[1]!=1){
test2$Simulated.Estimate[1:(intervals.na[1]-1)] <- test2$Simulated.Estimate[intervals.na[1]]
}
if (intervals.na[2]!=dim(test2)[1]){
test2$Simulated.Estimate[(intervals.na[2]+1):dim(test2)[1]] <- test2$Simulated.Estimate[intervals.na[2]]
}
tib$sim <- test2$Simulated.Estimate
model.phrase <- paste0("Simulation (\u03C1 = ", rho.sim, ")")
colnames(tib)[which(colnames(tib)=="sim")] <- model.phrase
tib <- pivot_longer(tib, -time, names_to="drug", values_to="survival")
tib$drug <- as.factor(tib$drug)
orig.levels <- levels(tib$drug)
comb <- which(orig.levels=="Combination")
mod <- which(orig.levels==model.phrase)
others <- setdiff(1:4, c(comb, mod))
tib$drug <- factor(tib$drug, levels = c(orig.levels[mod], orig.levels[comb], orig.levels[others[1]], orig.levels[others[2]]), ordered = TRUE)
mytheme <- theme(
panel.background = element_rect(fill = "transparent"), # bg of the panel
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
) + theme(axis.line = element_line(color="black", size = 0.75)) + theme(axis.text.x = element_text(size = 11),
axis.text.y = element_text(size = 11))  + theme(
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14)) + theme(plot.title = element_text(size = 14))
plt <- ggplot(tib) + geom_line(aes(x=time, y=survival, color=drug), size=1.3) + mytheme + xlab("Time (months)") + ylab("PFS") + ggtitle(stringr::str_wrap(filtered.meta$fullname, width=nwidth))
legend <- theme(legend.justification = 'left', legend.position="bottom", legend.title = element_blank(), legend.key = element_rect(colour = "transparent", fill = "white"), legend.text=element_text(size=10), )
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
plt <- plt + legend + scale_color_manual(values=cbbPalette) + guides(colour = guide_legend(nrow = 2))
plt <- plt + annotate(geom = 'text', label = paste0('   p-value = ', pvalue) , x = -Inf, y = 0.15, hjust = 0, vjust = 1, size=4.7)
store.plts[[k]] <- plt
next
}
pvalue <- round(filtered.meta$p.model, 3)
if ((pvalue==0)|(pvalue==1)){
pvalue <- format(filtered.meta$p.model, scientific=TRUE, digits=3)
}
model <- res$y.model$pfs
tib$model <- model
lower <- bands(tib, filtered.meta$lower)
upper <- bands(tib, filtered.meta$upper)
lower <- mono(lower)
upper <- mono(upper)
tib$drugAB <- mono(tib$drugAB)
tib$drugA <- mono(tib$drugA)
tib$drugB <- mono(tib$drugB)
tib$model <- mono(tib$model)
model.phrase <- (paste0("Model: ","\u03C1 = (", rho.lower, ", ", rho.upper, ")"))
colnames(tib)[which(colnames(tib)=="drugA")] <- filtered.meta$A_name
colnames(tib)[which(colnames(tib)=="drugB")] <- filtered.meta$B_name
colnames(tib)[which(colnames(tib)=="drugAB")] <- "Combination"
#adjust to be seen (can go as high as subtraction of 0.01)
if (rho.model == 1){
tib$model <- tib$model - 0.0085
}
colnames(tib)[which(colnames(tib)=="model")] <- model.phrase
tib <- pivot_longer(tib, -time, names_to="drug", values_to="survival")
tib$lower <- NA
tib$lower[tib$drug==model.phrase] <- lower
tib$upper <- NA
tib$upper[tib$drug==model.phrase] <- upper
tib$drug <- as.factor(tib$drug)
orig.levels <- levels(tib$drug)
comb <- which(orig.levels=="Combination")
mod <- which(orig.levels==model.phrase)
others <- setdiff(1:4, c(comb, mod))
tib$drug <- factor(tib$drug, levels = c(orig.levels[mod], orig.levels[comb], orig.levels[others[1]], orig.levels[others[2]]), ordered = TRUE)
mytheme <- theme(
panel.background = element_rect(fill = "transparent"), # bg of the panel
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
) + theme(axis.line = element_line(color="black", size = 0.75)) + theme(axis.text.x = element_text(size = axis_text_size),
axis.text.y = element_text(size = axis_text_size))  + theme(
axis.title.x = element_text(size = title_font_size),
axis.title.y = element_text(size = title_font_size)) + theme(plot.title = element_text(size = (title_font_size-1)))
plt <- ggplot(tib, aes(x=time, y=survival)) + geom_smooth(aes(ymin=lower, ymax=upper, color=drug), stat="identity") + mytheme + xlab("Time (months)") + ylab("PFS") + ggtitle(stringr::str_wrap(filtered.meta$fullname, width=nwidth))
legend <- theme(legend.justification = 'left', legend.position="bottom", legend.title = element_blank(), legend.key = element_rect(colour = "transparent", fill = "white"), legend.text=element_text(size=legend_font_size), )
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
#x label tick marks should be integers not floats! SO USE THE BELOW CODE APPROPRIATELY
#breaks.x <-
#scale_x_continuous(breaks=c(1,3,7,10))
plt <- plt + legend + scale_color_manual(values=cbbPalette) + guides(colour = guide_legend(nrow = 2))
plt <- plt + annotate(geom = 'text', label = paste0('   p-value = ', pvalue) , x = -Inf, y = 0.05, hjust = 0, vjust = 1, size=pvalue_size_cex)
store.plts[[k]] <- plt
}
if (sim.figs){
saveRDS(store.plts, "SIM_panels_clinical_trials.rds")
}  else{
saveRDS(store.plts, "MODEL_panels_clinical_trials.rds")
print("done")
}
}
panels_clinical_trials("../results.clinical", FALSE, title_font_size, axis_text_size, pvalue_size_cex=4.9)
if (renderSim){
panels_clinical_trials("../results.clinical", sim.figs=TRUE, title_font_size, axis_text_size, pvalue_size_cex, legend_font_size)
}
if (renderSim){
store.sim.plts <- readRDS("SIM_panels_clinical_trials.rds")
ranges <- c(1, seq(0, length(store.sim.plts), length(store.sim.plts)/3)[-1])
for (x in 1:(length(ranges)-1)){
temp <- store.sim.plts[ranges[x]:ranges[x+1]]
a <- temp[[1]]
b <- temp[[2]]
c <- temp[[3]]
d <- temp[[4]]
e <- temp[[5]]
f <- temp[[6]]
temp.fig <- plot_grid(a,b,c,d,e,f, label_size=label_font_size, labels="AUTO", ncol=2)
fname <- paste0("supplement/simulated_curves_", x, ".pdf")
ggsave(temp.fig, filename=fname, width=13.5, height=20, units="in", dpi=320, device=cairo_pdf)
}
}
### ------------------------------------------------------------------------------------------------------
#Already made with summary_clintrial.R in final_version_of_scripts folder
#### create csv file with model and simulation summary statistics for supplement
#dir.to.clin.results <- "../scripts/final_version_of_scripts/results.clinical.test"
#summ <- readRDS(file.path(dir.to.clin.results,"summary.rds"))
#summ$id <- as.numeric(gsub("([0-9]+).*$", "\\1", summ$name))
#summ <- summ %>% as_tibble() %>% select(-c(name, A_name, B_name)) %>% rename(trial=fullname, model.lower.ci=lower, model.upper.ci=upper)
#summ <- summ %>% arrange(id)
#summ <- summ %>% dplyr::rename(`Trial ID`=id)
#summ <- summ %>% select(`Trial ID`, trial, model.lower.ci, rho.model, model.upper.ci, p.model, rho.sim, p.sim)
#write.csv(summ, "supplement/trials_results.csv", row.names=FALSE)
#Dot plot w/ CI showing rho model values
dotplot <- function(dir.to.clin.results, axis_text_size, title_font_size, legend_font_size){
p.cutoff <- .01
metares <- readRDS(file.path(dir.to.clin.results, "summary.rds"))
metares$id <- as.numeric(gsub("([0-9]+).*$", "\\1", metares$name))
metares <- metares %>% arrange(desc(id))
mytheme <- theme(
panel.background = element_rect(fill = "transparent"), # bg of the panel
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(colour="grey70", size=0.15, linetype="dashed"),# get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
) + theme(axis.line = element_line(color="black", size = 0.75)) + theme(axis.text.x = element_text(size = axis_text_size),
axis.text.y = element_text(size = axis_text_size))  + theme(
axis.title.x = element_text(size = title_font_size),
axis.title.y = element_text(size = title_font_size)) + theme(plot.title = element_text(size = title_font_size))
cbbPalette <- c("#000000", "#F0E442", "#E69F00", "#56B4E9", "#009E73", "#0072B2", "#D55E00", "#CC79A7")
metares <- metares %>% arrange(desc(rho.model)) %>% mutate(id=1:n())
plot <- ggplot(metares, aes(x=id, y=rho.model)) + geom_hline(yintercept=0, size=1, color="grey", linetype="dashed") + geom_point(aes(color="c"), size=1.5) + geom_errorbar(aes(x=id, ymin=lower, ymax=upper), color="black")  + ylab("Correlation of Model Estimate") + xlab("Trial ID") + mytheme  + scale_x_continuous(breaks=seq(1,18,1)) + coord_flip()
legend <- theme(legend.justification = 'left', legend.position="bottom", legend.title = element_blank(), legend.key = element_rect(colour = "transparent", fill = "white"), legend.text=element_text(size=legend_font_size), )
nonsig.rows <- metares %>% filter(p.model > p.cutoff) %>% pull(id)
plot <- plot + geom_point(data = metares %>% filter(id %in% nonsig.rows), aes(x=id, y=rho.model, color="b"), size=2.5) + scale_color_manual(name="", labels=c("CDA (p-value > 0.01)", "Non-CDA (p-value < 0.01)"), values=c("purple", "black")) + legend + guides(colour = guide_legend(nrow = 2))
#highlight y labels another option for labeling non-sig rows
#plot + theme(axis.text.y = element_text(color=rep("red", 18)))
#ggsave(plot, device="pdf", filename="../../figures/dotplot.pdf", width=7, height=9, units="in", dpi=320)
return(plot)
}
#i is the # of the trial - either 14, 2, 4, 8 - maybe not 8 unclear whether label is gc or gemcitabine
# we could compute some sort of CI for placebo by shuffling A and AP in the script that generates results of placebo...
placebo.plot <- function(i, dir.to.placebo, off=FALSE, axis_text_size, legend_font_size, title_font_size, nwidth=43){
dirs <- list.dirs(dir.to.placebo, recursive=FALSE)
match <- grepl(as.character(i), dirs)
if (sum(match) <= 0){
return("DID NOT ENTER VALID TRIAL NUMBER")
}
summary <- file.path(dir.to.placebo, "placebo.summary.csv")
s <- read_csv(summary)
case <- dirs[match]
if (length(case)>1){
case <- case[2]
}
file <- paste0(case, "/raw.results.rds")
raw.results <- readRDS(file)
s.f <- s %>% filter(name==basename(case))
colnames(raw.results)[which(colnames(raw.results)=="drugA")] <- s.f$drugA_name
colnames(raw.results)[which(colnames(raw.results)=="drugAB")] <- "Combination"
colnames(raw.results)[which(colnames(raw.results)=="placebo")] <- "Placebo"
colnames(raw.results)[which(colnames(raw.results)=="y.model")] <- "Model"
tib <- pivot_longer(raw.results, -time, names_to="drug", values_to="survival")
tib$drug <- as.factor(tib$drug)
orig.levels <- levels(tib$drug)
comb <- which(orig.levels=="Combination")
mod <- which(orig.levels=="Model")
others <- setdiff(1:4, c(comb, mod))
tib$drug <- factor(tib$drug, levels = c(orig.levels[mod], orig.levels[comb], orig.levels[others[1]], orig.levels[others[2]]), ordered = TRUE)
mytheme <- theme(
panel.background = element_rect(fill = "transparent"), # bg of the panel
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
) + theme(axis.line = element_line(color="black", size = 0.75)) + theme(axis.text.x = element_text(size = axis_text_size),
axis.text.y = element_text(size = axis_text_size))  + theme(
axis.title.x = element_text(size = title_font_size),
axis.title.y = element_text(size = title_font_size)) + theme(plot.title = element_text(size = title_font_size))
plt <- ggplot(tib, aes(x=time, y=survival, color=drug))  + geom_line(size=1.3) + mytheme + xlab("Time (months)") + ylab("PFS") + ggtitle(stringr::str_wrap(s.f$fullname, width=nwidth))
legend <- theme(legend.justification = 'left', legend.position="bottom", legend.title = element_blank(), legend.key = element_rect(colour = "transparent", fill = "white"), legend.text=element_text(size=legend_font_size), )
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
#x label tick marks should be integers not floats! SO USE THE BELOW CODE APPROPRIATELY
#breaks.x <-
#scale_x_continuous(breaks=c(1,3,7,10))
plt2 <- plt + legend + scale_color_manual(values=cbbPalette) + guides(colour = guide_legend(nrow = 2))
if (off){
plt2 <- plt + legend + scale_color_manual(values=cbbPalette)
}
return(plt2)
}
f <- dotplot("../results.clinical", axis_text_size, title_font_size, legend_font_size-4)
store.plts <- readRDS("MODEL_panels_clinical_trials.rds")
model.trials.to.show <- c(2, 4, 16, 12, 17)
a <- store.plts[[model.trials.to.show[1]]]
b <- store.plts[[model.trials.to.show[2]]]
c <- store.plts[[model.trials.to.show[3]]]
d <- store.plts[[model.trials.to.show[4]]]
e <- store.plts[[model.trials.to.show[5]]]
fig2 <- plot_grid(f, a, b, c, d, e, label_size=label_font_size, labels="AUTO", ncol=2)
ggsave(fig2, device=cairo_pdf, filename=paste0("figure2.pdf"), width=12, height=18, units="in", dpi=320)
### Supplemental figures for placebo
p.list <- c(2,4,8,14)
store.p <- vector("list", 4L)
for (y in 1:length(p.list)){
x <- p.list[y]
temp <- placebo.plot(x, "../placebo.results", FALSE, axis_text_size, legend_font_size, title_font_size)
store.p[[y]] <- temp
}
a <- store.p[[1]]
b <- store.p[[2]]
c <- store.p[[3]]
d <- store.p[[4]]
placebo.others <- plot_grid(a,b,c,d, labels="AUTO", label_size=label_font_size)
ggsave(placebo.others, device=cairo_pdf, filename="supplement/placebo.pdf", width=13, height=13, units="in", dpi=320)
### Supplemental Figures SHOW OTHER MODEL TRIALS DATA
store.plts <- readRDS("MODEL_panels_clinical_trials.rds")
n.others <- setdiff(1:length(store.plts), c(model.trials.to.show, trial.to.follow ))
fig.idxs <- list(s1=n.others[1:4], s2=n.others[5:8], s3=n.others[9:12])
for (y in 1:length(fig.idxs)){
x <- fig.idxs[[y]]
a <- store.plts[[x[1]]]
b <- store.plts[[x[2]]]
c <- store.plts[[x[3]]]
d <- store.plts[[x[4]]]
model.sup <- plot_grid(a,b,c,d,label_size=label_font_size, labels="AUTO", ncol=2)
ggsave(model.sup, device=cairo_pdf, filename=paste0("supplement/model_results_", names(fig.idxs)[y], ".pdf"), width=12.65, height=12.65, units="in", dpi=320)
}
print("executed completely")
#location of helper functions
helper.dir <- "../scripts"
library(ggpubr)
library(tidyverse)
library(cowplot)
library(readxl)
source(file.path(helper.dir, "randomization.R"))
source(file.path(helper.dir, "estimation_methods.R"))
source(file.path(helper.dir, "functions.R"))
source(file.path(helper.dir, "simulation.R"))
source("figure_functions_clinical.R")
###########################################
#axis_text_size = 15
#legend_size = 14
#title_size = 18
#facet_text_size = 16
#label_size = 25
axis_text_size = 16
title_size = 20
legend_size = 20
facet_text_size = 18
label_size = 27
dir.to.clin <- "../raw-data"
dir.to.clin.results <- "../results.clinical"
xlab.wrap <- 60
ylab.wrap <- 27
#############################################
#create sim data from ka kb na nb
dat <- get_sim_data(6, 3, 5, 0.9)
#figure for fraction lies on line
fraction_figure <- function(dat, axis_text_size, legend_size, title_size, facet_text_size, label_size){
rhos <- seq(0, 1, 0.01)
fracs <- unlist(lapply(rhos, function(x) sim_corr(dat, x, "coin")$frac))
g <- data.frame(rho=rhos, fraction=fracs) %>% as_tibble()
pval <- summary(lm(rho~fraction, g))$coefficients[2,4]
pval <- format(pval, scientific=TRUE, digits=3)
rsq <- round(summary(lm(rho~fraction, g))$r.squared, 3)
panel_rhos <- c(0, 0.25, 0.5, 0.75)
panels <- lapply(panel_rhos, function(x) sim_corr(dat, x, "coin"))
int.panels <- lapply(panels, function(x) data.frame(B=x$jumbledB, A=x$dat$drugA, unalteredB=x$dat$drugB, rho=x$rho) %>% as_tibble() %>% mutate(online=B==unalteredB) %>% select(-unalteredB))
int.panels <- do.call(rbind, int.panels)
int.panels$rho <- paste0("Spearman Correlation: ", int.panels$rho)
mytheme <- theme(
panel.background = element_rect(fill = "transparent"), # bg of the panel
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
) + theme(axis.line = element_line(color="black", size = 0.75)) + theme(axis.text.x = element_text(size = axis_text_size),
axis.text.y = element_text(size = axis_text_size))  + theme(
axis.title.x = element_text(size = title_size),
axis.title.y = element_text(size = title_size)) + theme(plot.title = element_text(size = title_size))
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
legend <- theme(legend.justification = 'left', legend.position="bottom", legend.title = element_blank(), legend.key = element_rect(colour = "transparent", fill = "white"), legend.text=element_text(size=legend_size), )
plot <- ggplot(int.panels, aes(x=A, y=B, color=online)) + geom_point(size=2) + facet_wrap(~rho, scales="free") + scale_color_manual(name="", labels=c("not on corr = 1 curve", "on corr = 1 curve"), values=cbbPalette) + guides(colour = guide_legend(nrow = 1)) + legend + mytheme + theme(strip.text=element_text(size=facet_text_size), strip.background = element_blank())
plot <- plot + xlab("Simulated Survival Times Under Drug A") + ylab("Simulated Survival Times Under Drug B")
plot2 <- ggplot(g, aes(x=rho, y=fraction)) + geom_point(size=2.4) + mytheme + xlab("Computed \u03c1 in Coin Simulation") + ylab("Fraction of points on the \u03c1 = 1 curve") + geom_abline(slope=1, intercept=0, color="blue", linetype="dashed", size=1.6)
plot2 <- plot2 + annotate(geom = 'text', label = paste0("   R-squared: ", rsq, ", p-value: ", pval) , x = -Inf, y = -0.15, hjust = 0, vjust = 1, size=6)
fig <- plot_grid(plot, plot2, labels="AUTO", label_size=label_size, ncol=2)
ggsave(fig, device=cairo_pdf, filename="supplement/coin_rho_interpretation.pdf", width=20, height=10, units="in", dpi=320)
}
fraction_figure(dat, axis_text_size, legend_size, title_size, facet_text_size, label_size)
#figure for predict with jitter fit with model and predict with coin and fit with model
fit.test <- function(dat, rho2, method){
res <- sim_corr(dat, rho2, method)
fdat <- res$dat
guess <- fit(fdat, 0.01)
p <- guess$tib %>% mutate(rho=res$rho) %>% select(time, rho, drugAB, model) %>% pivot_longer(-c(time, rho), names_to="type", values_to="val")
list(p=p, rho=rho2, guess.rho=guess$rho)
}
plot.fit.test <- function(j, coin=TRUE, title_size, axis_text_size, legend_size, facet_text_size){
mytheme <- theme(
panel.background = element_rect(fill = "transparent"), # bg of the panel
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
) + theme(axis.line = element_line(color="black", size = 0.75)) + theme(axis.text.x = element_text(size = axis_text_size),
axis.text.y = element_text(size = axis_text_size))  + theme(
axis.title.x = element_text(size = title_size),
axis.title.y = element_text(size = title_size)) + theme(plot.title = element_text(size = title_size))
cbbPalette <- c("#000000",  "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
legend <- theme(legend.justification = 'left', legend.position="bottom", legend.title = element_blank(), legend.key = element_rect(colour = "transparent", fill = "white"), legend.text=element_text(size=legend_size), )
l <- do.call(rbind, lapply(j, function(x) x$p))
l$rho <- paste0("Spearman Correlation: ", l$rho)
p <- ggplot(l, aes(x=time, y=val, color=type, linetype=type)) + facet_wrap(~rho, scales="free") + geom_line(size=1.6) + mytheme + legend  + guides(colour = guide_legend(nrow = 1), linetype=FALSE) + theme(strip.text=element_text(size=facet_text_size), strip.background = element_blank())
p <- p + xlab("Survival Time") + ylab("Progression Free Survival")
if (coin){
p <- p + scale_color_manual(name="", labels=c(paste0("'Coin' Simulated Combination"), paste0("Optimal CDA Model Estimate", j$guess.rho)), values=cbbPalette)
} else{
p <- p + scale_color_manual(name="", labels=c(paste0("'Window Swap' Simulated Combination"), paste0("Optimal CDA Model Estimate", j$guess.rho)), values=cbbPalette)
}
p
}
master_sim_comp_figure <- function(method, dat, title_size, axis_text_size, legend_size, facet_text_size, label_size){
mytheme <- theme(
panel.background = element_rect(fill = "transparent"), # bg of the panel
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
) + theme(axis.line = element_line(color="black", size = 0.75)) + theme(axis.text.x = element_text(size = axis_text_size),
axis.text.y = element_text(size = axis_text_size))  + theme(
axis.title.x = element_text(size = title_size),
axis.title.y = element_text(size = title_size)) + theme(plot.title = element_text(size = title_size))
cbbPalette <- c("#000000",  "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
legend <- theme(legend.justification = 'left', legend.position="bottom", legend.title = element_blank(), legend.key = element_rect(colour = "transparent", fill = "white"), legend.text=element_text(size=legend_size), )
rho_list <- c(-0.5, 0, 0.5, 0.75)
itemize <- lapply(rho_list, function(x) fit.test(dat, x, method))
if (method=="coin"){
p <- plot.fit.test(itemize, TRUE,title_size, axis_text_size, legend_size, facet_text_size )
} else{
p <- plot.fit.test(itemize, FALSE, title_size, axis_text_size, legend_size, facet_text_size)
}
rhos <- seq(-1, 1, 0.02)
vals <- (lapply(rhos, function(x) fit.test(dat, x, method)[c(2,3)] %>% unlist() %>% unname()))
v <- do.call(rbind, vals) %>% as_tibble()
colnames(v) <- c("true.rho", "guess.rho")
pval <- summary(lm(true.rho~guess.rho, v))$coefficients[2,4]
pval <- format(pval, scientific=TRUE, digits=3)
rsq <- round(summary(lm(true.rho~guess.rho, v))$r.squared, 3)
if (rsq == 1){
rsq.int <- summary(lm(true.rho~guess.rho, v))$r.squared
rsq <- format(rsq.int, scientific=TRUE, digits=4)
}
if (method=="coin"){
plot2 <- ggplot(v, aes(x=true.rho, y=guess.rho)) + geom_point(size=2.4) + mytheme + xlab(paste0("Set Value of \u03c1 in Coin Simulated Combination")) + ylab("Optimal Estimate of \u03b1 with Temporal CDA Model") + geom_abline(slope=1, intercept=0, color="blue", linetype="dashed", size=1.6)
} else{
plot2 <- ggplot(v, aes(x=true.rho, y=guess.rho)) + geom_point(size=2.4) + mytheme + xlab(paste0("Set Value of \u03c1 in Window Swap Simulated Combination")) + ylab("Optimal Estimate of \u03b1 with Temporal CDA Model") + geom_abline(slope=1, intercept=0, color="blue", linetype="dashed", size=1.6)
}
plot2 <- plot2 + annotate(geom = 'text', label = paste0("     R-squared = ", rsq, ", p-value = ", pval) , x = -Inf, y = -1.02, hjust = 0, vjust = 1, size=5)
fig <- plot_grid(p, plot2, labels="AUTO", label_size=label_size, ncol=2)
ggsave(fig, device=cairo_pdf, filename=paste0("supplement/model_is_", method, ".pdf"), width=20, height=10, units="in", dpi=320)
}
master_sim_comp_figure("coin", dat,title_size, axis_text_size, legend_size, facet_text_size, label_size)
master_sim_comp_figure("window.swap", dat,title_size, axis_text_size, legend_size, facet_text_size, label_size)
sim.results <- function(kB, nB, kA, nA, rho, axis_text_size, label_size, facet_text_size, title_size, legend_size, xlab.wrap, ylab.wrap){
dat <- get_sim_data(kA, nA, kB, nB)
mytheme <- theme(
panel.background = element_rect(fill = "transparent"), # bg of the panel
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
) + theme(axis.line = element_line(color="black", size = 0.75)) + theme(axis.text.x = element_text(size = axis_text_size),
axis.text.y = element_text(size = axis_text_size))  + theme(
axis.title.x = element_text(size = title_size),
axis.title.y = element_text(size = title_size)) + theme(plot.title = element_text(size = title_size))
B.coin <- find.correlated.vector(dat, rho=rho, param=0.2,stall=40,type="coin",error=0.019)
#B.double.walk <- find.correlated.vector(dat, rho=rho, param=0.2,stall=40,type="double_walk",error=0.015)
B.window.swap <- find.correlated.vector(dat, rho=rho, param=0.2,stall=40,type="window.swap",error=0.019)
#B.jitter <- find.correlated.vector(dat, rho=rho, param=0.2,stall=40,type="jitter",error=0.015)
#print(rho - cor(B.coin, dat$drugA, method="spearman"))
if (rho < 0){
B.coin <- rev(B.coin)
#B.jitter <- rev(B.jitter)
#B.double.walk <- rev(B.double.walk)
B.window.swap <- rev(B.window.swap)
}
#tA vs. tB curve
#times.actual <- data.frame(Coin=B.coin, Double.Walk=B.double.walk, Jitter=B.jitter, Window.Swap=B.window.swap, A=dat$drugA)
times.actual <- data.frame(Coin=B.coin, Window.Swap=B.window.swap, A=dat$drugA)
times.actual <- pivot_longer(times.actual, -A, names_to="method", values_to="B")
drugs.labs <- c("Coin", "Window Swap")
names(drugs.labs) <- c("Coin",  "Window.Swap")
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
#need more separation between different tyoes, should be visually nice
tatb <- ggplot(times.actual, aes(x=A, y=B, color=method)) + geom_point(size=1.5)+ xlim(0, 30) + ylim(0 ,30) + scale_color_manual(values=cbbPalette) + ggtitle(paste0("Spearman Correlation Value: ", rho))  + facet_wrap(~method, scales="free", labeller=labeller(method=drugs.labs))
tatb <- tatb + mytheme + xlab(stringr::str_wrap("Simulated Pt. Survival Times under Drug A", width=xlab.wrap)) + ylab(stringr::str_wrap("Simulated Pt. Survival Times under Drug B", width=ylab.wrap)) + theme(strip.background =element_rect(fill="transparent")) +  theme(strip.text = element_text(size=facet_text_size)) + theme(legend.position = "none")
coin <- rev(sort(pmax(B.coin, dat$drugA)))
#jitter <- rev(sort(pmax(B.jitter, dat$drugA)))
#dwalk <- rev(sort(pmax(B.double.walk, dat$drugA)))
wswap <- rev(sort(pmax(B.window.swap, dat$drugA)))
dat$coin <- coin
#dat$jitter <- jitter
#dat$dwalk <- dwalk
dat$wswap <- wswap
dat <- dat %>% as_tibble() %>% select(-c(drugA, drugB))
dat.long <- pivot_longer(dat, cols=-pfs,names_to="drug", values_to="time")
legend <- theme(legend.justification = 'left', legend.position="bottom", legend.title = element_blank(), legend.key = element_rect(colour = "transparent", fill = "white"), legend.text=element_text(size=legend_size), )
curves <- ggplot(dat.long, aes(x=time, y=pfs, color=drug)) + geom_line(size=1.45) + mytheme + xlab("Time") + ylab("PFS") + ggtitle("Survival Curves Based On Simulated Data") + legend + scale_color_manual(values=cbbPalette, labels=c("Coin", "Window Swap")) + xlim(0, 30)
out <- plot_grid(tatb, curves, labels="AUTO", label_size=label_size)
out
}
part1 <- sim.results(6, 2,5, 1, 0.25, axis_text_size, label_size, facet_text_size, title_size, legend_size, xlab.wrap, ylab.wrap)
rho <- 0.25
k <- 3
real.methods.comp <- function(rho, k, dir.to.clin, dir.to.clin.results,axis_text_size, label_size, facet_text_size, title_size, legend_size, xlab.wrap, ylab.wrap){
mytheme <- theme(
panel.background = element_rect(fill = "transparent"), # bg of the panel
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
) + theme(axis.line = element_line(color="black", size = 0.75)) + theme(axis.text.x = element_text(size = axis_text_size),
axis.text.y = element_text(size = axis_text_size))  + theme(
axis.title.x = element_text(size = title_size),
axis.title.y = element_text(size = title_size)) + theme(plot.title = element_text(size = title_size))
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
legend <- theme(legend.justification = 'left', legend.position="bottom", legend.title = element_blank(), legend.key = element_rect(colour = "transparent", fill = "white"), legend.text=element_text(size=legend_size), )
metares <- readRDS(file.path(dir.to.clin.results, "summary.rds"))
censor <- 0.98
newd <- file.path(dir.to.clin, "clinical_trials")
dirs <- list.dirs(newd, recursive=FALSE, full.name=FALSE)
idx <- dirs[k]
file <- file.path(dir.to.clin.results, idx, "data.rds")
fullname <- metares %>% filter(name==idx) %>% pull(fullname)
A.name <- metares %>% filter(name==idx) %>% pull(A_name)
B.name <- metares %>% filter(name==idx) %>% pull(B_name)
xlab.A <- paste0("Pt. Survival Times Under ", A.name)
ylab.B <- paste0("Pt. Survival Times Under ", B.name)
data <- readRDS(file)
tib <- data$data
times <- data$sim.data
cutpt <- max(tib$time)*censor
num.mono.pts <- attributes(tib)$num.pts.mono
num.ab.pts <- attributes(tib)$num.pts.ab
model <- bands(tib, rho)
b.model <- find.correlated.vector(times, rho=rho, param=0.2,stall=40,type="coin",error=0.019)
b.sim <- in.the.looking.glass(times$drugB, times, rho, error=0.019)
y.sim <- sort(pmax(b.sim, times$drugA))
times.actual <- data.frame(model=b.model, sim=b.sim, A=times$drugA)
times.actual <- pivot_longer(times.actual, -A, names_to="method", values_to="B")
drugs.labs <- c("Coin", "Window Swap")
names(drugs.labs) <- c("model",  "sim")
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
tatb <- ggplot(times.actual, aes(x=A, y=B, color=method)) + geom_point(size=1.5) + scale_color_manual(values=cbbPalette) + ggtitle(paste0("Spearman Correlation Value: ", rho))  + facet_wrap(~method, scales="free", labeller=labeller(method=drugs.labs))
tatb <- tatb + mytheme + xlab(stringr::str_wrap(xlab.A, width=xlab.wrap)) + ylab(stringr::str_wrap(ylab.B, width=ylab.wrap)) + theme(strip.background =element_rect(fill="transparent")) +  theme(strip.text = element_text(size=facet_text_size)) + theme(legend.position = "none")
best.mono.tail <- max(tail(tib$drugA, 1), tail(tib$drugB, 1))
sim.out <- transform.vector.to.cdf(y.sim, best.mono.tail)
test <- approx(sim.out$time, sim.out$pfs, tib$time)
test2 <- data.frame(time=test$x, 'Simulated Estimate'=test$y) %>% as_tibble()
test2$idx <- 1:dim(test2)[1]
intervals.na <- test2 %>% filter(!is.na(Simulated.Estimate)) %>% slice(1, n()) %>% pull(idx)
if (intervals.na[1]!=1){
test2$Simulated.Estimate[1:(intervals.na[1]-1)] <- test2$Simulated.Estimate[intervals.na[1]]
}
if (intervals.na[2]!=dim(test2)[1]){
test2$Simulated.Estimate[(intervals.na[2]+1):dim(test2)[1]] <- test2$Simulated.Estimate[intervals.na[2]]
}
tib$sim <- test2$Simulated.Estimate
tib$model <- model
tib2 <- tib %>% select(c(model, sim, time))
tib.long <- pivot_longer(tib2, cols=-time,names_to="drug", values_to="pfs")
legend <- theme(legend.justification = 'left', legend.position="bottom", legend.title = element_blank(), legend.key = element_rect(colour = "transparent", fill = "white"), legend.text=element_text(size=legend_size), )
library(stringi)
title <- str_wrap(paste0("Survival Curves Based On Clinical Trial Data: ", fullname), 65)
curves <- ggplot(tib.long, aes(x=time, y=pfs, color=drug)) + geom_line(size=1.45) + mytheme + xlab("Time") + ylab("PFS")  + legend + ggtitle(title) + scale_color_manual(values=cbbPalette, labels=c("Coin", "Window Swap"))
out2 <- plot_grid(tatb, curves, labels=c("C", "D"), label_size=label_size)
out2
}
#these sim methods are similar but real world noise makes them different considerably!
part2 <- real.methods.comp(rho, k, dir.to.clin, dir.to.clin.results, axis_text_size, label_size, facet_text_size, title_size, legend_size, xlab.wrap, ylab.wrap)
t <- plot_grid(part1, part2, nrow=2)
ggsave(t, device=cairo_pdf, filename="supplement/compare_randomize_methods.pdf", width=18, height=10, units="in", dpi=320)
