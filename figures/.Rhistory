pct.change <- runif(n=1, min=0, max=5)
sign <- sample(c(1, -1, -1, -1), size = 1)
price <- (1 + sign*(pct.change/100) )*price
if (div.bool){
div <- (div.amt.yr/4)*shares
extra.shares <- div/price
shares <- shares + extra.shares
}
curr.value <- shares*price
value[(t+1)] <- curr.value
t <- t + 1
}
#plot(value)
return(round(value[(n+1)]/value[1], 2))
}
n <- 200
yrs <- seq(1, 35, 5)
div.pct <- 4
df <- matrix(nrow=(200*length(yrs)), ncol=5)
for (y in yrs){
out <- vector(mode="numeric", n)
out.no.div <- vector(mode="numeric", n)
for (i in 1:n){
out[i] <- dividend.sim(TRUE, yrs=y, div.percent=div.pct/100)
out.no.div[i] <- dividend.sim(FALSE, yrs=y, div.percent=NULL)
}
risk.free.rate <- (1+0.02)^y
idx <- which(y==yrs)
rows <- ((idx-1)*n + 1): (idx*n)
df[rows, 1] <- out
df[rows, 2] <- out.no.div
df[rows, 3] <- y
df[rows, 4] <- risk.free.rate
df[rows, 5] <- div.pct
}
colnames(df) <- c("div", "no_div", "yrs", "rf", "div.pct")
library(tidyverse)
df <- df %>% as_tibble()
df.long <- df %>% pivot_longer(-c(yrs, div.pct, rf), names_to="type", values_to="return")
ggplot(df.long, aes(x=as.factor(yrs), y=return, color=type)) + geom_boxplot() + theme_bw() +  geom_line(inheret.aes = FALSE, aes(x=factor(yrs), y=rf, group = 1), color = "blue")
#prob.beat.rf.rate.div <- sum(out > risk.free.rate) / n
#prob.beat.rf.rate.no.div <- sum(out.no.div > risk.free.rate) / n
#show family this example
#keep in mind: here, the price from start to end does not change much or at all
#without dividend, but what if you buy in blindly every so often (Recurring investment)?
#w/o dividend, it will reinvest bavk ingo innovation but w dividend substantial signaling no more highlight breakthroughs but stable core business ongoing
#but in most dividend cases, it takes 16 years to double!!
#some paradoxical results emerge, like how you can have weighted negative returns (1, -1, -1) and after a bit it just explodes OR you can decrease max return change per period and it does better than higher rate change
dividend.sim <- function(div.bool=TRUE, yrs=10, init.shares=50, init.price=50, div.percent=0.03){
shares <- init.shares
price <- init.price
curr.value <- price*shares
t <- 1
n <- yrs*4
div.amt.yr <- price*div.percent #divident amount per year
value <- vector(mode="numeric", n+1)
value[1] <- curr.value
while (t <= n){
pct.change <- runif(n=1, min=0, max=5)
sign <- sample(c(1, 1, 1, -1), size = 1)
price <- (1 + sign*(pct.change/100) )*price
if (div.bool){
div <- (div.amt.yr/4)*shares
extra.shares <- div/price
shares <- shares + extra.shares
}
curr.value <- shares*price
value[(t+1)] <- curr.value
t <- t + 1
}
#plot(value)
return(round(value[(n+1)]/value[1], 2))
}
n <- 200
yrs <- seq(1, 35, 5)
div.pct <- 4
df <- matrix(nrow=(200*length(yrs)), ncol=5)
for (y in yrs){
out <- vector(mode="numeric", n)
out.no.div <- vector(mode="numeric", n)
for (i in 1:n){
out[i] <- dividend.sim(TRUE, yrs=y, div.percent=div.pct/100)
out.no.div[i] <- dividend.sim(FALSE, yrs=y, div.percent=NULL)
}
risk.free.rate <- (1+0.02)^y
idx <- which(y==yrs)
rows <- ((idx-1)*n + 1): (idx*n)
df[rows, 1] <- out
df[rows, 2] <- out.no.div
df[rows, 3] <- y
df[rows, 4] <- risk.free.rate
df[rows, 5] <- div.pct
}
colnames(df) <- c("div", "no_div", "yrs", "rf", "div.pct")
library(tidyverse)
df <- df %>% as_tibble()
df.long <- df %>% pivot_longer(-c(yrs, div.pct, rf), names_to="type", values_to="return")
ggplot(df.long, aes(x=as.factor(yrs), y=return, color=type)) + geom_boxplot() + theme_bw() +  geom_line(inheret.aes = FALSE, aes(x=factor(yrs), y=rf, group = 1), color = "blue")
#prob.beat.rf.rate.div <- sum(out > risk.free.rate) / n
#prob.beat.rf.rate.no.div <- sum(out.no.div > risk.free.rate) / n
options(noaakey = "FsbwNbQyoIOHLnPdaNSZJQZquVXxakKu")
out <- ncdc(datasetid='NORMAL_DLY', datatypeid='dly-tavg-normal', startdate = '2010-05-01', enddate = '2010-05-10',  add_units=TRUE, stationid = 'GHCND:USW00014895')
library(rnoaa)
out <- ncdc(datasetid='NORMAL_DLY', datatypeid='dly-tavg-normal', startdate = '2010-05-01', enddate = '2010-05-10',  add_units=TRUE, stationid = 'GHCND:USW00014895')
out
out <- ncdc(datasetid='NORMAL_DLY', datatypeid='dly-tavg-normal', startdate = '2016-05-01', enddate = '2016-05-10',  add_units=TRUE, stationid = 'GHCND:USW00014895')
out <- ncdc(datasetid='NORMAL_DLY', datatypeid='dly-tavg-normal', startdate = '2015-05-01', enddate = '2015-05-10',  add_units=TRUE, stationid = 'GHCND:USW00014895')
out <- ncdc(datasetid='NORMAL_DLY', datatypeid='dly-tavg-normal', startdate = '2014-05-01', enddate = '2014-05-10',  add_units=TRUE, stationid = 'GHCND:USW00014895')
out <- ncdc(datasetid='NORMAL_DLY', datatypeid='dly-tavg-normal', startdate = '2013-05-01', enddate = '2013-05-10',  add_units=TRUE, stationid = 'GHCND:USW00014895')
out <- ncdc(datasetid='NORMAL_DLY', datatypeid='dly-tavg-normal', startdate = '2012-05-01', enddate = '2012-05-10',  add_units=TRUE, stationid = 'GHCND:USW00014895')
out <- ncdc(datasetid='NORMAL_DLY', datatypeid='dly-tavg-normal', startdate = '2011-05-01', enddate = '2011-05-10',  add_units=TRUE, stationid = 'GHCND:USW00014895')
out <- ncdc(datasetid='NORMAL_DLY', datatypeid='dly-tavg-normal', startdate = '2010-05-01', enddate = '2010-05-10',  add_units=TRUE, stationid = 'GHCND:USW00014895')
out <- ncdc(datasetid='NORMAL_DLY', datatypeid='dly-tavg-normal', startdate = '2010-01-01', enddate = '2010-01-31',  add_units=TRUE, stationid = 'GHCND:USW00014895')
out
plot(out$data$value)
plot(density(out$data$value))
ncdc_locs(locationcategoryid = "CITY", sortfield = "name", sortorder='dexc')
plot(density(out$data$value))
ncdc_locs(locationcategoryid = "CITY", sortfield = "name", sortorder='desc')
out <- ncdc(datasetid='NORMAL_DLY', datatypeid='dly-tavg-normal', startdate = '2010-05-01', enddate = '2010-05-10',  add_units=TRUE, locationid = 'CITY:RS000081')
out <- ncdc(datasetid='NORMAL_DLY', datatypeid='dly-tavg-normal', startdate = '2010-05-01', enddate = '2010-05-10',  add_units=TRUE, locationid = 'CITY:US420024')
out
type <- ncdc_locs(datasetid=c('GHCND', 'NORMAL_DLY'))
type
type$data %>% dim()
dim(type$data)
type <- ncdc_locs(datasetid=c('GHCND', 'NORMAL_DLY'), stationid='GHCND:USW00014895')
type
cities <- ncdc_locs(locationcategoryid = "CITY", sortfield = "name", sortorder='desc')
cities
cities <- ncdc_locs(locationcategoryid = "CITY", sortfield = "name", sortorder='desc', limit=1000)
cities
library(tidyverse)
cities$data %>% as_tibble()
cities$data %>% as_tibble() %>% filter(grepl("CA", names))
cities$data %>% as_tibble() %>% filter(grepl("CA", name))
cities$data %>% as_tibble() %>% filter(grepl("CA US", name))
ca.cities <- cities$data %>% as_tibble() %>% filter(grepl("CA US", name))
lapply(ca.cities[1:10], function(x) ncdc(datasetid='NORMAL_DLY', limit=10, datatypeid='dly-tavg-normal', startdate = '2020-01-01', enddate = '2020-01-31',  add_units=TRUE, locationid=x))
lapply(ca.cities$id[1:10], function(x) ncdc(datasetid='NORMAL_DLY', limit=10, datatypeid='dly-tavg-normal', startdate = '2020-01-01', enddate = '2020-01-31',  add_units=TRUE, locationid=x))
ncdc(locationid = ca.cities$id[1])
ncdc(datasetid='NORMAL_DLY', limit=10, datatypeid='dly-tavg-normal', startdate = '2020-01-01', enddate = '2020-01-31',  add_units=TRUE, locationid=ca.cities$id[1])
ncdc(datasetid='NORMAL_DLY', limit=10, datatypeid='dly-tavg-normal', startdate = '2010-01-01', enddate = '2010-01-31',  add_units=TRUE, locationid=ca.cities$id[1])
x <- ncdc(datasetid='NORMAL_DLY', limit=1000, datatypeid='dly-tavg-normal', startdate = '2010-01-01', enddate = '2010-01-31',  add_units=TRUE, locationid=ca.cities$id[1])
x
get_data <- function(x){
data <- ncdc(datasetid='NORMAL_DLY', limit=100, datatypeid='dly-tavg-normal', startdate = '2010-01-01', enddate = '2010-03-31',  add_units=TRUE, locationid=x$id)
data$data %>% as_tibble() %>% mutate(city=x$name, cityid=x$id)
}
get_data <- function(x){
data <- ncdc(datasetid='NORMAL_DLY', limit=100, datatypeid='dly-tavg-normal', startdate = '2010-01-01', enddate = '2010-03-31',  add_units=TRUE, locationid=x$id)
data$data %>% as_tibble() %>% mutate(city=x$name, cityid=x$id)
}
data <- lapply(1:dim(ca.cities)[1], function(x) get_data(ca.cities[x,]))
data
data <- do.call(rbind, data) %>% as_tibble()
data
saveRDS(data, "~/Desktop/school/geostats/data_final.rds")
library(rtracklayer)
library(tidyverse)
gff <- rtracklayer::import("ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_25/GRCh37_mapping/gencode.v25lift37.annotation.gff3.gz")
gff
gff <- rtracklayer::import("ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_25/GRCh37_mapping/gencode.v25lift37.annotation.gff3.gz")
# Chunk 1: load pkgs
library(here)
library(devtools)
library(magrittr)
library(tidyverse)
library(SummarizedExperiment)
library(ggpubr)
library(cowplot)
load_all(here("code", "DFDBayes", "R") )
library(grid)
library(gridExtra)
library(rtracklayer)
library(data.table)
data.table::setDTthreads(1)
# Chunk 2: read in support files
#fantom_mutually_unexpressed is from the Ulz paper where he describes that according to FANTOM5, these genes are unexpressed in all tissue types. (source: https://github.com/PeterUlz/Nucleosome_ctDNA/blob/master/ref/FANTOM5/Fantom5_all_lower0.1.txt)
unexpressed_genes <- read_table(here("data", "infer_gene_expression", "fantom_mutually_unexpressed.txt"), col_names = FALSE) %>% unname() %>% unlist()
#housekeeping genes is from the Ulz paper (source: https://github.com/PeterUlz/Nucleosome_ctDNA/blob/master/ref/Housekeeping/HK_gene_names.txt)
hk_genes <- read_table(here("data", "infer_gene_expression", "housekeeping.txt"), col_names = FALSE) %>% unname() %>% unlist()
#this is how we got the gene regions reference (source: Dan Bruhm)
#gff <- rtracklayer::import("ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_25/GRCh37_mapping/gencode.v25lift37.annotation.gff3.gz")
#gff <- readRDS("/dcl01/scharpf1/data/aarun/cfDNA_origins/gene_regions_ref.rds")
#then we transferred to my local machine
# get /dcl01/scharpf1/data/aarun/cfDNA_origins/gene_regions_ref.rds /Users/aditharun/Dropbox/cfDNA_origins/rcfDNA/data/infer_gene_expression/
gene_regions <- readRDS(here("data", "infer_gene_expression", "gene_regions_ref.rds"))
gene_regions <- as.data.table(gene_regions)
#inside the /data/infer_gene_expression directory is PGDX20245N.bed which is a sample bed file for which I can do my analyses
sample <- fread(here("data", "infer_gene_expression", "PGDX20245N.bed"),data.table=FALSE,header=FALSE)
# Chunk 3: do TSS operations
genes_hk <- gene_regions[type=="gene"][gene_name %in% hk_genes][,.(seqnames, start, end, strand, gene_name, ID)][,status:="HK"]
genes_un <- gene_regions[type=="gene"][gene_name %in% unexpressed_genes][,.(seqnames, start, end, strand, gene_name, ID)][,status:="UN"]
genes_un <- genes_un[seqnames %in% paste0("chr", 1:22)][gene_name != "Y_RNA"]
genes_hk <- genes_hk[seqnames %in% paste0("chr", 1:22)]
genes_un[, tss := start][strand == "-", tss := end]
genes_hk[, tss := start][strand == "-", tss := end]
genes_un <- genes_un[,.(seqnames, tss, status)]
genes_hk <- genes_hk[,.(seqnames, tss, status)]
tss <- rbindlist(list(genes_un, genes_hk))
tss[,tss2 := tss]
max(0, 4, 5)
library(ggplot2)
data <- data.frame(x=c(1,2), y=c(3,4))
ggplot(data, aes(x=x, y=y)) + geom_point() + xlim(0, 10) + ylim(0, 10)
system(ls(), intern=TRUE)
system(cd, intern=TRUE)
system("ls", intern=TRUE)
system("ls")
system("pwd")
system("cd Public")
system("touch test.txt")
pnorm(q=-0.77, lower.tail=TRUE)
pnorm(q=-0.77, lower.tail=FALSE)
pnorm(q=-0.77, lower.tail=TRUE
)
setwd("~/Users/aditharun")
setwd("/Users/aditharun")
library(tidyverse)
x <- read_csv(file = "PGDX20245N.csv" )
x
ggplot(x, aes(x=dist_from_tss, y=n.reads/n.genes, color=type)) + geom_point()
x
x <- x %>% mutate(standard.reads = n.reads / n.genes)
x
ggplot(x, aes(x=dist_from_tss, y=n.reads/n.genes, color=type)) + geom_point()
y <- x %>% mutate(n.genes=ifelse(status=="UN", 670, n.genes))
y <- x %>% mutate(n.genes=ifelse(type=="UN", 670, n.genes))
ggplot(y, aes(x=dist_from_tss, y=n.reads/n.genes, color=type)) + geom_point()
ggplot(y %>% filter(type=="UN"), aes(x=dist_from_tss, y=n.reads/n.genes, color=type)) + geom_point()
ggplot(y %>% filter(type=="HK"), aes(x=dist_from_tss, y=n.reads/n.genes, color=type)) + geom_point()
x <- read_csv(file = "PGDX20245N.csv" )
x
x  <- x %>% mutate(n.genes=ifelse(type=="UN", 670, n.genes))
x
x %>% mutate(standard.cov = n.reads / (tot_reads * n.genes))
v
x <- x %>% mutate(standard.cov = n.reads / (tot_reads * n.genes))
ggplot(x, aes(x=dist_from_tss, y=standard.cov, color=type)) + geom_point()
ggplot(x %>% filter(type=="UN"), aes(x=dist_from_tss, y=standard.cov, color=type)) + geom_point()
ggplot(x %>% filter(type=="HK"), aes(x=dist_from_tss, y=standard.cov, color=type)) + geom_point()
ggplot(x %>% filter(type=="HK"), aes(x=dist_from_tss, y=standard.cov, color=type)) + geom_point() + geom_line()
x
loess(standard.cov ~ dist_from_tss, data=x %>% filter(type=="UN"), span=0.10)
predict(loess(standard.cov ~ dist_from_tss, data=x %>% filter(type=="UN"), span=0.10))
plot(predict(loess(standard.cov ~ dist_from_tss, data=x %>% filter(type=="UN"), span=0.10)))
predict(loess(standard.cov ~ dist_from_tss, data=x %>% filter(type=="UN"), span=0.10))
x
plot(predict(loess(standard.cov ~ dist_from_tss, data=x %>% filter(type=="UN"), span=0.40)))
plot(predict(loess(standard.cov ~ dist_from_tss, data=x %>% filter(type=="UN"), span=0.05)))
plot(predict(loess(standard.cov ~ dist_from_tss, data=x %>% filter(type=="UN"), span=0.1)))
x
x$tissue_type
x
x %>% group_by(sample, type)
x %>% group_by(sample, type) %>% mutate(loess = predict(loess(standard.cov ~ dist_from_tss, data=x %>% filter(type=="UN"), span=0.1)))
x %>% group_by(sample, type) %>% mutate(loess = predict(loess(standard.cov ~ dist_from_tss, data=., span=0.1)))
x <- split(x, x$sample)
x
x <- lapply(x, function(t) t$type)
x
x <- read_csv(file = "PGDX20245N.csv" )
#comment this next line out once results_final is completed
x  <- x %>% mutate(n.genes=ifelse(type=="UN", 670, n.genes))
#standardization
x <- x %>% mutate(standard.cov = n.reads / (tot_reads * n.genes))
#smooth the points
x <- split(x, x$sample)
x <- lapply(x, function(t) split(t, t$sample))
x
x <- read_csv(file = "PGDX20245N.csv" )
#comment this next line out once results_final is completed
x  <- x %>% mutate(n.genes=ifelse(type=="UN", 670, n.genes))
#standardization
x <- x %>% mutate(standard.cov = n.reads / (tot_reads * n.genes))
#smooth the points
x <- split(x, x$sample)
x <- lapply(x, function(t) split(t, t$type))
x
x[[1]]
x[[1]][[1]]
lapply(x, function(y) lapply(y) predict(loess(standard.cov ~ dist_from_tss, data=y, span=0.1)))
lapply(x, function(y) lapply(y) predict(loess(standard.cov ~ dist_from_tss, data=y, span=0.1) ) )
x
lapply(x, function(y) lapply(y, function(z) predict(loess(standard.cov ~ dist_from_tss, data=z, span=0.1) ) ) )
lapply(x, function(y) do.call(rbind, lapply(y, function(z) predict(loess(standard.cov ~ dist_from_tss, data=z, span=0.1) ) ) ) )
lapply(x, function(y) do.call(cbind, lapply(y, function(z) predict(loess(standard.cov ~ dist_from_tss, data=z, span=0.1) ) ) ) )
lapply(x, function(y) do.call(cbind, lapply(y, function(z) predict(loess(standard.cov ~ dist_from_tss, data=z, span=0.1) ) ) ) %>% as_tibble() )
x
lapply(x, function(y) do.call(cbind, lapply(y, function(z) predict(loess(standard.cov ~ dist_from_tss, data=z, span=0.1) ) ) ) %>% as_tibble() %>% mutate(dist_from_tss = z$tss[z$type=="HK"]))
x <- read_csv(file = "PGDX20245N.csv" )
distances <- x$dist_from_tss
distances
distances %>% unique()
x <- read_csv(file = "PGDX20245N.csv" )
distances <- x$dist_from_tss %>% unique()
#comment this next line out once results_final is completed
x  <- x %>% mutate(n.genes=ifelse(type=="UN", 670, n.genes))
#standardization
x <- x %>% mutate(standard.cov = n.reads / (tot_reads * n.genes))
#smooth the points
x <- split(x, x$sample)
x <- lapply(x, function(t) split(t, t$type))
lapply(x, function(y) do.call(cbind, lapply(y, function(z) predict(loess(standard.cov ~ dist_from_tss, data=z, span=0.1) ) ) ) %>% as_tibble() %>% mutate(dist_from_tss = distances ) )
smth.x <- lapply(x, function(y) do.call(cbind, lapply(y, function(z) predict(loess(standard.cov ~ dist_from_tss, data=z, span=0.1) ) ) ) %>% as_tibble() %>% mutate(dist_from_tss = distances ) )
smth.x
plot(smth.x$UN)
smth.x$UN
plot(smth.x$PGDX20245N$UN)
do.call(rbind, lapply(x, function(y) do.call(cbind, lapply(y, function(z) predict(loess(standard.cov ~ dist_from_tss, data=z, span=0.1) ) ) ) %>% as_tibble() %>% mutate(dist_from_tss = distances ) ) )
do.call(cbind, lapply(x, function(y) do.call(cbind, lapply(y, function(z) predict(loess(standard.cov ~ dist_from_tss, data=z, span=0.1) ) ) ) %>% as_tibble() %>% mutate(dist_from_tss = distances ) ) )
smth.x <-  lapply(x, function(y) do.call(cbind, lapply(y, function(z) predict(loess(standard.cov ~ dist_from_tss, data=z, span=0.1) ) ) ) %>% as_tibble() %>% mutate(dist_from_tss = distances ) )
smth.x
do.call(rbind, smth.x)
do.call(rbind, smth.x) %>% as_data_frame()
do.call(rbind, smth.x) %>% as.data.frame()
x <- read_csv(file = "PGDX20245N.csv" )
distances <- x$dist_from_tss %>% unique()
#comment this next line out once results_final is completed
x  <- x %>% mutate(n.genes=ifelse(type=="UN", 670, n.genes))
#standardization
x <- x %>% mutate(standard.cov = n.reads / (tot_reads * n.genes))
x
x$sample[1] <- "TEST"
x <- split(x, x$sample)
x <- lapply(x, function(t) split(t, t$type))
x
smth.x <-  lapply(x, function(y) do.call(cbind, lapply(y, function(z) predict(loess(standard.cov ~ dist_from_tss, data=z, span=0.1) ) ) ) %>% as_tibble() %>% mutate(dist_from_tss = distances ) )
x <- read_csv(file = "PGDX20245N.csv" )
distances <- x$dist_from_tss %>% unique()
#comment this next line out once results_final is completed
x  <- x %>% mutate(n.genes=ifelse(type=="UN", 670, n.genes))
#standardization
x <- x %>% mutate(standard.cov = n.reads / (tot_reads * n.genes))
x$sample[1:200] <- "test"
#smooth the points
x <- split(x, x$sample)
x <- lapply(x, function(t) split(t, t$type))
x
smth.x <-  lapply(x, function(y) do.call(cbind, lapply(y, function(z) predict(loess(standard.cov ~ dist_from_tss, data=z, span=0.1) ) ) ) %>% as_tibble() %>% mutate(dist_from_tss = distances ) )
smth.x <-  lapply(x, function(y) do.call(cbind, lapply(y, function(z) predict(loess(standard.cov ~ dist_from_tss, data=z, span=0.1) ) ) ) %>% as_tibble())
smth.x
do.call(rbind, smth.x)
do.call("rbind", smth.x)
ldply(smth.x)
library(plyr)
ldply(smth.x, rbind)
ldply(smth.x, rbind) %>% as_tibble()
ldply(smth.x, rbind) %>% as_tibble() %>% rename(id=.id)
ldply(smth.x, rbind) %>% as_tibble() %>% dplyr::rename(id=.id)
smth.x <- ldply(smth.x, rbind) %>% as_tibble() %>% dplyr::rename(sample=.id)
smth.x
library(tidyverse)
library(plyr)
x <- read_csv(file = "PGDX20245N.csv" )
distances <- x$dist_from_tss %>% unique()
#comment this next line out once results_final is completed
x  <- x %>% mutate(n.genes=ifelse(type=="UN", 670, n.genes))
#standardization
x <- x %>% mutate(standard.cov = n.reads / (tot_reads * n.genes))
#smooth the points
x <- split(x, x$sample)
x <- lapply(x, function(t) split(t, t$type))
smth.x <-  lapply(x, function(y) do.call(cbind, lapply(y, function(z) predict(loess(standard.cov ~ dist_from_tss, data=z, span=0.1) ) ) ) %>% as_tibble() %>% mutate(dist_from_tss = distances ) )
smth.x <- ldply(smth.x, rbind) %>% as_tibble() %>% dplyr::rename(sample=.id)
smth.x
max.val <- max(smth.x$HK, smth.x$UN)
smth.x <- smth.x %>% mutate(HK=HK/max.val, UN=UN/max.val)
smth.x
smth.x %>% pivot_longer(-c(sample, dist_from_tss), names_to="type", values_to="rel_cov")
smth.x <-  lapply(x, function(y) do.call(cbind, lapply(y, function(z) predict(loess(standard.cov ~ dist_from_tss, data=z, span=0.1) ) ) ) %>% as_tibble() %>% mutate(dist_from_tss = distances ) )
smth.x <- ldply(smth.x, rbind) %>% as_tibble() %>% dplyr::rename(sample=.id)
max.val <- max(smth.x$HK, smth.x$UN)
smth.x <- smth.x %>% mutate(HK=HK/max.val, UN=UN/max.val) %>% pivot_longer(-c(sample, dist_from_tss), names_to="type", values_to="rel_cov")
smth.x
ggplot(smth.x, aes(x=dist_from_tss, y=rel_cov, color=type)) + geom_point()
ggplot(smth.x %>% filter(type=="HK"), aes(x=dist_from_tss, y=rel_cov, color=type)) + geom_point()
smth.x
smth.x
ggplot(smth.x, aes(x=dist_from_tss, y=rel_cov, color=type)) + geom_point()
library(tidyverse)
library(plyr)
x <- read_csv(file = "PGDX20245N.csv" )
distances <- x$dist_from_tss %>% unique()
#comment this next line out once results_final is completed
x  <- x %>% mutate(n.genes=ifelse(type=="UN", 670, n.genes))
#standardization
x <- x %>% mutate(standard.cov = n.reads / (tot_reads * n.genes))
#smooth the points
x <- split(x, x$sample)
x <- lapply(x, function(t) split(t, t$type))
smth.x <-  lapply(x, function(y) do.call(cbind, lapply(y, function(z) predict(loess(standard.cov ~ dist_from_tss, data=z, span=0.1) ) ) ) %>% as_tibble() %>% mutate(dist_from_tss = distances ) )
smth.x <- ldply(smth.x, rbind) %>% as_tibble() %>% dplyr::rename(sample=.id)
max.val <- max(smth.x$HK, smth.x$UN)
smth.x <- smth.x %>% mutate(HK=HK/max.val, UN=UN/max.val) %>% pivot_longer(-c(sample, dist_from_tss), names_to="type", values_to="rel_cov")
#why are the bands so tight?? show rob the generates_tss_files.R to show how I get coverage at sites other than TSS; nuc_cov.R script for how I am intersecting to get coverage
ggplot(smth.x, aes(x=dist_from_tss, y=rel_cov, color=type)) + geom_point()
ggplot(smth.x, aes(x=dist_from_tss, y=rel_cov, color=type)) + geom_point()
ggplot(smth.x %>% filter(type=="HK"), aes(x=dist_from_tss, y=rel_cov, color=type)) + geom_point())
ggplot(smth.x %>% filter(type=="HK"), aes(x=dist_from_tss, y=rel_cov, color=type)) + geom_point()
library(tidyverse)
library(plyr)
x <- read_csv(file = "PGDX20245N.csv" )
distances <- x$dist_from_tss %>% unique()
#comment this next line out once results_final is completed
x  <- x %>% mutate(n.genes=ifelse(type=="UN", 670, n.genes))
#standardization
x <- x %>% mutate(standard.cov = n.reads / (tot_reads * n.genes))
#smooth the points
x <- split(x, x$sample)
x <- lapply(x, function(t) split(t, t$type))
smth.x <-  lapply(x, function(y) do.call(cbind, lapply(y, function(z) predict(loess(standard.cov ~ dist_from_tss, data=z, span=0.1) ) ) ) %>% as_tibble() %>% mutate(dist_from_tss = distances ) )
smth.x <- ldply(smth.x, rbind) %>% as_tibble() %>% dplyr::rename(sample=.id)
max.val <- max(smth.x$HK, smth.x$UN)
smth.x <- smth.x %>% mutate(HK=HK/max.val, UN=UN/max.val) %>% pivot_longer(-c(sample, dist_from_tss), names_to="type", values_to="rel_cov")
#why are the bands so tight?? show rob the generates_tss_files.R to show how I get coverage at sites other than TSS; nuc_cov.R script for how I am intersecting to get coverage
ggplot(smth.x, aes(x=dist_from_tss, y=rel_cov, color=type)) + geom_point()
ggplot(smth.x %>% filter(type=="HK"), aes(x=dist_from_tss, y=rel_cov, color=type)) + geom_point()
ggplot(smth.x %>% filter(type=="UN"), aes(x=dist_from_tss, y=rel_cov, color=type)) + geom_point()
x <- read_csv(file = "PGDX20245N.csv" )
distances <- x$dist_from_tss %>% unique()
#comment this next line out once results_final is completed
x  <- x %>% mutate(n.genes=ifelse(type=="UN", 670, n.genes))
x
ggplot(x, aes(x=dist_from_tss, y=n.reads, color=type)) + geom_point()
x
3587 / 670
x  <- x %>% mutate(n.genes=ifelse(type=="UN", 670, n.genes))
#standardization
x <- x %>% mutate(standard.cov = n.reads / (tot_reads * n.genes))
ggplot(x, aes(x=dist_from_tss, y=n.reads, color=type)) + geom_point()
ggplot(x, aes(x=dist_from_tss, y=standard.cov, color=type)) + geom_point()
ggplot(x, aes(x=dist_from_tss, y=n.reads / n.genes, color=type)) + geom_point()
pnorm(q=regression.plots$z, lower.tail=FALSE)
pnorm(q=3, lower.tail=FALSE)
pnorm(q=3)
pnorm(q=3, lower.tail = FALSE)
pnorm(q=-3, lower.tail = FALSE)
pnorm(q=-3)
facet_size = 16
axis_text_size = 16
title_size = 21
legend_size = 18
pvalue_cex = 7
label_size = 27
size_geom_text = 5
dose.dir <- "../results.cell.line/doses.results.Bliss.Loewe"
sp.dose.dir <- "../results.cell.line/sp.doses.results.Bliss.Loewe"
#############################################
setwd("~/Documents/correlated-drug-action/figures/")
library(tidyverse)
library(readxl)
library(ggpubr)
library(cowplot)
source("figure_functions_dose.R")
files <- list.files(dose.dir, recursive=TRUE, full.names=TRUE, pattern="*.rds")
files2 <- list.files(sp.dose.dir, recursive=TRUE, full.names=TRUE, pattern="*.rds")
files3 <- c(files, files2)
files3 <- files3[!grepl("regression_*", files3)]
x <- files3[1]
x
regression.plots <-  readRDS(file.path(dirname(x), paste0("regression_", basename(x))) )
regression.plots
plot(density(regression.plots$loo.residuals))
plot(density(abs(regression.plots$loo.residuals)))
hist(abs(regression.plots$loo.residuals))
hist(abs(regression.plots$loo.residuals), breaks=10)
regression.plots$abs_res <- abs(regression.plots$loo.residuals)
mu_hat <- mean(log(regression.plots$abs_res))
sigma_hat <- sum (  (log(regression.plots$abs_res) - mu_hat)^2 ) * (1/ (nrow(regression.plots)-1))
plnorm(0)
plnorm(0, lower.tail=TRUE)
plnorm(0, lower.tail=FALSE)
mu_hat
plnorm(mu_hat + 1, lower.tail=FALSE, meanlog = mu_hat, sdlog = sd_hat)
var_hat <- sum (  (log(regression.plots$abs_res) - mu_hat)^2 ) * (1/ (nrow(regression.plots)-1))
sd_hat <- sqrt(var_hat)
#MLE of normal using residuals
#mu_hat <- mean(unwrap.true - unwrap.guess.final)
#var_hat <- var(unwrap.true - unwrap.guess.final)
#sigma_hat <- sqrt(var_hat)
plnorm(mu_hat + 1, lower.tail=FALSE, meanlog = mu_hat, sdlog = sd_hat)
var_hat <- sum (  (log(regression.plots$abs_res) - mu_hat)^2 ) * (1/ (nrow(regression.plots)-1))
sd_hat <- sqrt(var_hat)
#MLE of normal using residuals
#mu_hat <- mean(unwrap.true - unwrap.guess.final)
#var_hat <- var(unwrap.true - unwrap.guess.final)
#sigma_hat <- sqrt(var_hat)
plnorm(mu_hat + 4, lower.tail=FALSE, meanlog = mu_hat, sdlog = sd_hat)
var_hat <- sum (  (log(regression.plots$abs_res) - mu_hat)^2 ) * (1/ (nrow(regression.plots)-1))
sd_hat <- sqrt(var_hat)
#MLE of normal using residuals
#mu_hat <- mean(unwrap.true - unwrap.guess.final)
#var_hat <- var(unwrap.true - unwrap.guess.final)
#sigma_hat <- sqrt(var_hat)
plnorm(mu_hat + 10, lower.tail=FALSE, meanlog = mu_hat, sdlog = sd_hat)
var_hat <- sum (  (log(regression.plots$abs_res) - mu_hat)^2 ) * (1/ (nrow(regression.plots)-1))
sd_hat <- sqrt(var_hat)
#MLE of normal using residuals
#mu_hat <- mean(unwrap.true - unwrap.guess.final)
#var_hat <- var(unwrap.true - unwrap.guess.final)
#sigma_hat <- sqrt(var_hat)
plnorm(mu_hat + 10, lower.tail=TRUE, meanlog = mu_hat, sdlog = sd_hat)
plnorm(regression.plots$abs_res, lower.tail=FALSE, meanlog = mu_hat, sdlog = sd_hat)
regression.plots$abs_res
2 * pnorm( q=regression.plots$z, lower.tail=FALSE)
mu_hat <- mean(unwrap.true - unwrap.guess.final)
var_hat <- var(unwrap.true - unwrap.guess.final)
sigma_hat <- sqrt(var_hat)
regression.plots$z = (mu_hat - regression.plots$loo.residuals ) / sigma_hat
2 * pnorm( q=regression.plots$z, lower.tail=FALSE)
