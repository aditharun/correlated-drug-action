} else{
sigma <- matrix(0, nrow=n, ncol=n)
for (i in 1:n){
for (j in 1:n){
time.diff <- abs(data$time[i] - data$time[j])
sigma[i, j] <- covariance(time.diff)
}
}
saveRDS(sigma, "sigma.ps4.rds")
}
library(matrixcalc)
is.positive.definite(sigma)
dist1 <-
data$time
dist1 <- dist1 %*% t(rep(1, length(data$time)))
dist2 <- t(dist1)
dist2
diag(dist1) <- 0
dist1
dist1 %>% as_tibble()
diag(dist2) <- 0
timemat <- abs(dist1 - dist2)
timemat %>% as_tibble()
big_sig <- .45*exp(-timemat/17)
chol(big_sig)
n <- dim(data)[1]
variogram.func <- function(t){
.45*(1 - exp(-t/17))
}
covariance <- function(t){
.45 - variogram.func(t)
}
if (file.exists("sigma.ps4.rds")){
sigma <- readRDS("sigma.ps4.rds")
} else{
sigma <- matrix(0, nrow=n, ncol=n)
for (i in 1:n){
for (j in 1:n){
time.diff <- abs(data$time[i] - data$time[j])
sigma[i, j] <- covariance(time.diff)
}
}
saveRDS(sigma, "sigma.ps4.rds")
}
possibilities <- expand.grid(0:1, 0:1, 0:1, 0:1)[-1,] %>% as_tibble()
predictors <- data %>% select(net_radiation, air_temp, water_vapor, wind_speed, everything())
z <- data %>% select(CO2_flux) %>% as.matrix()
#det.sigma <- determinant(sigma, logarithm=TRUE)$modulus[1]
#cholesky not working (leading minor not positive definite...)
det.sigma <- 2*sum(log(diag(chol(sigma))))
n <- dim(data)[1]
variogram.func <- function(t){
.45*(1 - exp(-t/17))
}
covariance <- function(t){
.45 - variogram.func(t)
}
if (file.exists("sigma.ps4.rds")){
sigma <- readRDS("sigma.ps4.rds")
} else{
sigma <- matrix(0, nrow=n, ncol=n)
for (i in 1:n){
for (j in 1:n){
time.diff <- abs(data$time[i] - data$time[j])
sigma[i, j] <- covariance(time.diff)
}
}
saveRDS(sigma, "sigma.ps4.rds")
}
is.positive.definite(sigma)
possibilities <- expand.grid(0:1, 0:1, 0:1, 0:1)[-1,] %>% as_tibble()
predictors <- data %>% select(net_radiation, air_temp, water_vapor, wind_speed, everything())
z <- data %>% select(CO2_flux) %>% as.matrix()
#det.sigma <- determinant(sigma, logarithm=TRUE)$modulus[1]
#cholesky not working (leading minor not positive definite...)
det.sigma <- 2*sum(log(diag(chol(sigma))))
inv.sigma <- solve(sigma)
nrow <- dim(possibilities)[1]
possibilities$bic.score <- 0
for (j in 1:nrow){
indexes <- possibilities[j, ] %>% unlist() %>% unname()
columns.to.select <- (indexes * c(1:4) )
cols <- columns.to.select[columns.to.select > 0]
subsetted.predictors <- predictors[,cols] %>% mutate(intercept=1)
X <- subsetted.predictors %>% as.matrix()
hat.matrix <- X %*% solve( (t(X) %*% inv.sigma %*% X) ) %*% t(X) %*% inv.sigma
I <- diag( dim(hat.matrix)[1] )
RSS <- t(z) %*% inv.sigma %*% (I - hat.matrix) %*% z
bic.score <- det.sigma + RSS + length(cols)*log(n)
possibilities$bic.score[j] <- bic.score
}
possibilities
data
columns(possibilities) <- colnames(data)[4:7]
colnames(possibilities) <- colnames(data)[4:7]
possibilities %>% as.data.frame()
possibilities
colnames(possibilities)[5] <- "bic.score"
colnames(possibilities)[1:4] <- colnames(data)[4:7]
possibilities %>% as.data.frame()
possibilities
possibilities %>% filter(min(bic.score))
possibilities %>% arrange(bic.score)
possibilities %>% arrange(bic.score) %>% slice(1)
possibilities %>% arrange(bic.score) %>% slice(2)
second.best.model <- possibilities %>% arrange(bic.score) %>% slice(2)
first.best.model <- possibilities %>% arrange(bic.score) %>% slice(1)
difference.bic <- second.best.model$bic.score - first.best.model$bic.score
print(round(difference.bic, 3))
second.best.model <- possibilities %>% arrange(bic.score) %>% slice(2)
first.best.model <- possibilities %>% arrange(bic.score) %>% slice(1)
print(second.best.model)
difference.bic <- second.best.model$bic.score - first.best.model$bic.score
print(round(difference.bic, 3))
second.best.model <- possibilities %>% arrange(bic.score) %>% slice(2)
first.best.model <- possibilities %>% arrange(bic.score) %>% slice(1)
print(second.best.model)
difference.bic <- second.best.model$bic.score - first.best.model$bic.score
print(paste0("Difference in best and second best models: ", round(difference.bic, 3))
print(paste0("Difference in best and second best models: ", round(difference.bic, 3)))
possibilities <- possibilities %>% arrange(bic.score) %>% slice(1)
possibilities
second.best.model <- possibilities %>% slice(2)
first.best.model <- possibilities %>% slice(1)
print(second.best.model)
difference.bic <- second.best.model$bic.score - first.best.model$bic.score
second.best.model <- possibilities %>% slice(2)
first.best.model <- possibilities %>% slice(1)
print(second.best.model)
difference.bic <- second.best.model$bic.score - first.best.model$bic.score
possibilities <- expand.grid(0:1, 0:1, 0:1, 0:1)[-1,] %>% as_tibble()
predictors <- data %>% select(net_radiation, air_temp, water_vapor, wind_speed, everything())
z <- data %>% select(CO2_flux) %>% as.matrix()
#det.sigma <- determinant(sigma, logarithm=TRUE)$modulus[1]
#cholesky not working (leading minor not positive definite...)
det.sigma <- 2*sum(log(diag(chol(sigma))))
inv.sigma <- solve(sigma)
nrow <- dim(possibilities)[1]
possibilities$bic.score <- 0
for (j in 1:nrow){
indexes <- possibilities[j, ] %>% unlist() %>% unname()
columns.to.select <- (indexes * c(1:4) )
cols <- columns.to.select[columns.to.select > 0]
subsetted.predictors <- predictors[,cols] %>% mutate(intercept=1)
X <- subsetted.predictors %>% as.matrix()
hat.matrix <- X %*% solve( (t(X) %*% inv.sigma %*% X) ) %*% t(X) %*% inv.sigma
I <- diag( dim(hat.matrix)[1] )
RSS <- t(z) %*% inv.sigma %*% (I - hat.matrix) %*% z
bic.score <- det.sigma + RSS + length(cols)*log(n)
possibilities$bic.score[j] <- bic.score
}
colnames(possibilities)[1:4] <- colnames(data)[4:7]
possibilities %>% as.data.frame()
final.model <- possibilities %>% arrange(bic.score) %>% slice(1)
final.model
second.best.model <- possibilities %>% arrange(bic.score) %>% slice(2)
print(second.best.model)
difference.bic <- second.best.model$bic.score - final.model$bic.score
print(paste0("Difference in best and second best models: ", round(difference.bic, 3)))
indexes <- final.model[1, ] %>% unlist() %>% unname()
columns.to.select <- (indexes * c(1:4) )
cols <- columns.to.select[columns.to.select > 0]
subsetted.predictors <- predictors[,cols] %>% mutate(intercept=1)
predictors <- data %>% select(net_radiation, air_temp, water_vapor, wind_speed, everything())
indexes <- final.model[1, ] %>% unlist() %>% unname()
columns.to.select <- (indexes * c(1:4) )
cols <- columns.to.select[columns.to.select > 0]
subsetted.predictors <- predictors[,cols] %>% mutate(intercept=1)
indexes
predictors <- data %>% select(net_radiation, air_temp, water_vapor, wind_speed, everything())
indexes <- final.model[1, 1:4] %>% unlist() %>% unname()
columns.to.select <- (indexes * c(1:4) )
cols <- columns.to.select[columns.to.select > 0]
subsetted.predictors <- predictors[,cols] %>% mutate(intercept=1)
X <- subsetted.predictors %>% as.matrix()
a <- t(X) %*% inv.sigma %*% X
beta <- solve(a) %*% t(X) %*% inv.sigma %*% z
beta
predictors <- data %>% select(net_radiation, air_temp, water_vapor, wind_speed, everything())
indexes <- final.model[1, 1:4] %>% unlist() %>% unname()
columns.to.select <- (indexes * c(1:4) )
cols <- columns.to.select[columns.to.select > 0]
subsetted.predictors <- predictors[,cols] %>% mutate(intercept=1)
X <- subsetted.predictors %>% as.matrix()
a <- t(X) %*% inv.sigma %*% X
beta <- solve(a) %*% t(X) %*% inv.sigma %*% z
beta
estimates <- X %*% beta
estimates %>% head()
data$estimates <- estimates
data
estimates
estimates %>% head()
estimates <- X %*% beta
colnames(estimates) <- NULL
data$estimates <- estimates
data
estimates <- X %*% beta
colnames(estimates) <- NULL
data$estimates <- estimates[,1]
data
data %>% select(time, estimates, CO2_flux) %>% pivot_longer(-time, names_to="type", values_to="val")
data %>% select(time, estimates, CO2_flux) %>% pivot_longer(-time, names_to="type", values_to="val") %>% mutate(type=ifelse(type=="CO2_flux", "observed", "estimated"))
data %>% select(time, estimates, CO2_flux) %>% pivot_longer(-time, names_to="type", values_to="val") %>% mutate(type=ifelse(type=="CO2_flux", "observed", "estimated")) %>% rename(CO2_flux=type)
estimates <- X %*% beta
colnames(estimates) <- NULL
data$estimates <- estimates[,1]
plot.data <- data %>% select(time, estimates, CO2_flux) %>% pivot_longer(-time, names_to="type", values_to="val") %>% mutate(type=ifelse(type=="CO2_flux", "observed", "estimated")) %>% rename(CO2_flux=type)
ggplot(plot.data, aes(x=time, y=val)) + geom_point(color=CO2_flux) + theme_bw() + xlab("Time") + ylab("CO2 Flux") + theme(axis.text.x=element_blank())
plot.data
estimates <- X %*% beta
colnames(estimates) <- NULL
data$estimates <- estimates[,1]
plot.data <- data %>% select(time, estimates, CO2_flux) %>% pivot_longer(-time, names_to="type", values_to="val") %>% mutate(type=ifelse(type=="CO2_flux", "observed", "estimated")) %>% rename(CO2_flux=type)
ggplot(plot.data, aes(x=time, y=val, color=CO2_flux)) + geom_point() + theme_bw() + xlab("Time") + ylab("CO2 Flux") + theme(axis.text.x=element_blank())
install.packages("UniprotR")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(tidy.opts=list(width.cutoff=80),tidy=TRUE)
library(tidyverse)
library(magrittr)
library(geoR)
source("H_matrix.r")
calcH(nobs = 1)
calcH(nobs = 2)
calcH(nobs = 1)
H <- calcH(nobs = 1)
X <- rep(1, 3) %>% as.matrix(ncol=1, nrow=3)
X
diag(5)
R <- diag(5)
Q <- diag(3)
z <- c(3.109, 9.834, 8.534, 5.805, 0.953) %>% as.matrix(nrow=5, ncol=1)
sigma <- H %*% Q %*% t(H)
sigma <- ( H %*% Q %*% t(H) ) + R
sigma_z0 <- H %*% Q
dim(signa)
dim(sigma)
b <- H %*% X
c <- t(H %*% X)
dim(b)
dim(c)
cbind(c, 0)
A <- rbind( cbind(sigma, b), cbind(c, 0) )
A
cbind(sigma_z0, t(X) )
sigma_z0
d <- rbind(sigma_z0, t(X) )
vars <- solve(A, d)
vars
dim(A)
dim(d)
sigma_z0
dim(Q)
dim(H)
vars
lambda <- vars[1:5, 1:3]
lambda
lambda <- vars[-6, ]
v <- vars[6, ]
lambda
v <- vars[6, ] * -1
v
s_hat <- t(lambda) %*% z
s_hat
s_hat <- t(lambda) %*% z
print(s_hat)
s_hat <- t(lambda) %*% z
print(s_hat)
est_errors <- Q - ( t(lambda) %*% sigma_z0 ) + ( X %*% v )
print(est_errors)
Q
diag(est_errors)
sqrt(diag(est_errors))
s_hat
s_hat %>% unname() %>% unlist()
s_hat %>% as.vector()
sd <- sqrt(diag(est_errors))
unrolled_s_hat <- s_hat %>% as.vector()
unrolled_s_hat + sd
s_hat
sd
sd <- sqrt(diag(est_errors))
unrolled_s_hat <- s_hat %>% as.vector()
#for 95% interval
c <- 1.96
lower_ci <- unrolled_s_hat - 1.96*sd
upper_ci <- unrolled_s_hat + 1.96*sd
df <- data.frame(lower=lower_ci, upper=upper_ci)
rownames(df) <- c("s1", "s2", "s3")
df
sd <- sqrt(diag(est_errors))
unrolled_s_hat <- s_hat %>% as.vector()
#for 95% interval
c <- 1.96
lower_ci <- unrolled_s_hat - 1.96*sd
upper_ci <- unrolled_s_hat + 1.96*sd
df <- data.frame(lower=lower_ci, upper=upper_ci)
rownames(df) <- c("plant 1", "plant 2", "plant 3")
df
print(Q)
print(diag(est_errors))
print(Q)
print(diag(est_errors))
print("Q: ")
print(diag(Q) %>% as.matrix(ncol=1))
print("Diagonal entries of Error Covariance Matrix")
print(diag(est_errors) %>% as.matrix(ncol=1))
print("Q: ")
print(diag(Q) %>% as.matrix(ncol=1))
print("\n")
print("Diagonal entries of Error Covariance Matrix")
print(diag(est_errors) %>% as.matrix(ncol=1))
print("Q: ")
print(diag(Q) %>% as.matrix(ncol=1))
print(\n)
print("Q: ")
print(diag(Q) %>% as.matrix(ncol=1))
print("")
print("Diagonal entries of Error Covariance Matrix")
print(diag(est_errors) %>% as.matrix(ncol=1))
print(paste0("Diagonal Elements of Q: ", diag(Q)))
print(paste0("Diagonal entries of Error Covariance Matrix: ", diag(est_errors)))
print(paste0("Diagonal Elements of Q: ", diag(Q)))
print(paste0("Diagonal entries of Error Covariance Matrix: ", diag(est_errors)))
diagQ <- diag(Q)
diagest <- diag(est_errors)
print(paste0("Diagonal Elements of Q: ", diagQ))
print(paste0("Diagonal entries of Error Covariance Matrix: ",diagest))
diagQ
diagQ <- diag(Q)
diagest <- diag(est_errors)
print("Diagonal Elements of Q: ")
print(diagQ)
print("Diagonal entries of Error Covariance Matrix: ")
print(diagest)
sample(x = c(0, 1), size = 1, prob = c(0.5, 0.5))
sample(x = c(0, 1), size = 1, prob = c(0.5, 0.5))
sample(x = c(0, 1), size = 1, prob = c(0.5, 0.5))
sample(x = c(0, 1), size = 1, prob = c(0.5, 0.5))
sample(x = c(0, 1), size = 1, prob = c(0.5, 0.5))
ngen <- 1000
cells <- vector("numeric", ngen)
#initial condition
cells[1] <- 1
p.die <- 0.5
p.div <- 1 - p.die
iter <- function(ncell, die, div){
values <- sample(x = c(0, 2), size = ncell, prob = c(die, div), replace = TRUE)
return ( sum(values) )
}
extinct.gen <- NA
for (gen in 2: (ngen - 1) ){
cells[(gen+1)] <- iter( cells[(gen-1)], p.die, p.div)
if (cells[(gen+1)]==0)
{
extinct.gen <- (gen+1)
break
}
}
extinct.gen
cells
iter( cells[(1)], p.die, p.div)
iter( cells[(1)], p.die, p.div)
ngen <- 1000
cells <- vector("numeric", ngen)
#initial condition
cells[1] <- 1
p.die <- 0.5
p.div <- 1 - p.die
iter <- function(ncell, die, div){
values <- sample(x = c(0, 2), size = ncell, prob = c(die, div), replace = TRUE)
return ( sum(values) )
}
extinct.gen <- NA
for (gen in 2: (ngen - 1) ){
cells[gen] <- iter( cells[(gen-1)], p.die, p.div)
if (cells[gen]==0)
{
extinct.gen <- gen
break
}
}
extinct.gen
cells
ngen <- 1000
cells <- vector("numeric", ngen)
#initial condition
cells[1] <- 1
p.die <- 0.5
p.div <- 1 - p.die
iter <- function(ncell, die, div){
values <- sample(x = c(0, 2), size = ncell, prob = c(die, div), replace = TRUE)
return ( sum(values) )
}
extinct.gen <- NA
for (gen in 2: (ngen - 1) ){
cells[gen] <- iter( cells[(gen-1)], p.die, p.div)
if (cells[gen]==0)
{
extinct.gen <- gen
break
}
}
cells
ngen <- 1000
cells <- vector("numeric", ngen)
#initial condition
cells[1] <- 1
p.die <- 20/41
p.div <- 1 - p.die
iter <- function(ncell, die, div){
values <- sample(x = c(0, 2), size = ncell, prob = c(die, div), replace = TRUE)
return ( sum(values) )
}
extinct.gen <- NA
for (gen in 2: (ngen - 1) ){
cells[gen] <- iter( cells[(gen-1)], p.die, p.div)
if (cells[gen]==0)
{
extinct.gen <- gen
break
}
}
cells
ngen <- 1000
cells <- vector("numeric", ngen)
#initial condition
cells[1] <- 1
p.die <- 20/41
p.div <- 1 - p.die
iter <- function(ncell, die, div){
values <- sample(x = c(0, 2), size = ncell, prob = c(die, div), replace = TRUE)
return ( sum(values) )
}
extinct.gen <- NA
for (gen in 2: (ngen - 1) ){
cells[gen] <- iter( cells[(gen-1)], p.die, p.div)
if (cells[gen]==0)
{
extinct.gen <- gen
break
}
}
ngen <- 1000
cells <- vector("numeric", ngen)
#initial condition
cells[1] <- 1
p.die <- 20/41
p.div <- 1 - p.die
iter <- function(ncell, die, div){
values <- sample(x = c(0, 2), size = ncell, prob = c(die, div), replace = TRUE)
return ( sum(values) )
}
extinct.gen <- NA
for (gen in 2: (ngen - 1) ){
cells[gen] <- iter( cells[(gen-1)], p.die, p.div)
if (cells[gen]==0)
{
extinct.gen <- gen
break
}
}
setwd("~/Documents/correlated-drug-action/figures/")
library(ggpubr)
library(tidyverse)
library(cowplot)
library(readxl)
source("figure_functions_clinical.R")
renderSim <- FALSE
trial.to.follow <- 15
axis_text_size = 16
title_font_size = 20
legend_font_size = 20
facet_font_size = 16
pvalue_size_cex = 6
label_font_size = 27
width.fig = 12
height.fig = 15
dotplot <- function(dir.to.clin.results, axis_text_size, title_font_size, legend_font_size){
p.cutoff <- .01
metares <- readRDS(file.path(dir.to.clin.results, "summary.rds"))
metares$id <- as.numeric(gsub("([0-9]+).*$", "\\1", metares$name))
metares <- metares %>% arrange(desc(id))
mytheme <- theme(
panel.background = element_rect(fill = "transparent"), # bg of the panel
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(colour="grey70", size=0.15, linetype="dashed"),# get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
) + theme(axis.line = element_line(color="black", size = 0.75)) + theme(axis.text.x = element_text(size = axis_text_size),
axis.text.y = element_text(size = axis_text_size))  + theme(
axis.title.x = element_text(size = title_font_size),
axis.title.y = element_text(size = title_font_size)) + theme(plot.title = element_text(size = title_font_size))
cbbPalette <- c("#000000", "#F0E442", "#E69F00", "#56B4E9", "#009E73", "#0072B2", "#D55E00", "#CC79A7")
plot <- ggplot(metares, aes(x=id, y=rho.model)) + geom_point(aes(color="c"), size=1.5) + geom_errorbar(aes(x=id, ymin=lower, ymax=upper), color="black")  + ylab("Correlation of Model Estimate") + xlab("Trial ID") + mytheme  + scale_x_continuous(breaks=seq(1,18,1)) + coord_flip()
legend <- theme(legend.justification = 'left', legend.position="bottom", legend.title = element_blank(), legend.key = element_rect(colour = "transparent", fill = "white"), legend.text=element_text(size=legend_font_size), )
nonsig.rows <- metares %>% filter(p.model > p.cutoff) %>% pull(id)
plot <- plot + geom_point(data = metares %>% filter(id %in% nonsig.rows), aes(x=id, y=rho.model, color="b"), size=2.5) + scale_color_manual(name="", labels=c("CDA (p-value > 0.01)", "Non-CDA (p-value < 0.01)"), values=c("purple", "black")) + legend + guides(colour = guide_legend(nrow = 2))
#highlight y labels another option for labeling non-sig rows
#plot + theme(axis.text.y = element_text(color=rep("red", 18)))
#ggsave(plot, device="pdf", filename="../../figures/dotplot.pdf", width=7, height=9, units="in", dpi=320)
return(plot)
}
f <- dotplot("../results.clinical", axis_text_size, title_font_size, legend_font_size-4)
store.plts <- readRDS("MODEL_panels_clinical_trials.rds")
model.trials.to.show <- c(2, 4, 16, 12, 17)
a <- store.plts[[model.trials.to.show[1]]]
b <- store.plts[[model.trials.to.show[2]]]
c <- store.plts[[model.trials.to.show[3]]]
d <- store.plts[[model.trials.to.show[4]]]
e <- store.plts[[model.trials.to.show[5]]]
fig2 <- plot_grid(f, a, b, c, d, e, label_size=label_font_size, labels="AUTO", ncol=2)
ggsave(fig2, device=cairo_pdf, filename=paste0("figure2.pdf"), width=12, height=18, units="in", dpi=320)
