library(readxl)
library(ggvenn)
library(cowplot)
dir <- "/Users/aditharun/Desktop/research/wilson/final-data"
heart <- read_excel(file.path(dir, "heart-new-tmt.xlsx"))
muscle <- read_excel(file.path(dir, "muscle-new-tmt.xlsx"))
#brain <- read_excel("brain-new-tmt.xlsx")
color <- function(x){
x <- x %>% mutate(expression=ifelse(`p-value` < 0.05 ,'p-value < 0.05','p-value >= 0.05'))
colnames(x)[1] <- "fold.change"
x
}
heart <- color(heart)
#brain <- color(brain)
muscle <- color(muscle)
cbbPalette <- c("#E69F00", "#000000", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
plot <- function(x, sample, show_legend){
textsize <- 15
titlesize <- 18
if (show_legend){
leg <- "bottom"
} else{
leg <- "none"
}
ggplot(data = x,
aes(x = fold.change,
y = -log10(`p-value`),
colour=expression)) +
geom_point(alpha=0.4, size=3.5) +
scale_color_manual(values=cbbPalette[1:3])+
xlim(c(0, 3)) +
geom_vline(xintercept=c(0.95,1.05),lty=2,col="grey70",lwd=0.3) +
geom_hline(yintercept = 1.301,lty=4,col="grey70",lwd=0.3) +
xlab("fold change (KO/WT)")+
ylab("-log10 p-value")+
ggtitle(sample) +
theme_bw()+
theme(plot.title = element_text(hjust = 0.5, size=titlesize, family="Arial"),
legend.position=leg,
legend.title = element_blank()) +   theme(
panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
panel.grid.major = element_blank(), # get rid of major grid
panel.grid.minor = element_blank(), # get rid of minor grid
) + theme(
axis.title.x = element_text(size = textsize, family="Arial"),
axis.text.x = element_text(size = textsize-1, family="Arial"),
axis.title.y = element_text(size = textsize, family="Arial"),
axis.text.y= element_text(size=textsize-1, family="Arial"),
legend.text = element_text(size=textsize-1, family="Arial")
)
}
m <- plot(muscle, "Muscle", FALSE)
#b <- plot(brain, "Brain", FALSE)
h <- plot(heart, "Heart", TRUE)
plot <- plot_grid(m, h, labels=NULL, ncol=1)
plot
library(plotly)
muscle
plot_ly(
muscle, x = ~fold.change, y = ~-log10( `p-value`),
# Hover text:
text = ~Protein,
color = ~expression) %>% layout(title="Muscle", yaxis=list(title="-log10(p-value)"), xaxis=list(title="Fold Change (KO/WT)") )
plot_ly(
muscle, x = ~fold.change, y = ~-log10( `p-value`), marker = list(color=cbbPalette),
# Hover text:
text = ~Protein,
color = ~expression) %>% layout(title="Muscle", yaxis=list(title="-log10(p-value)"), xaxis=list(title="Fold Change (KO/WT)") )
plot_ly(
muscle, x = ~fold.change, y = ~-log10( `p-value`),
# Hover text:
text = ~Protein,
color = ~expression, colors=cbbPalette) %>% layout(title="Muscle", yaxis=list(title="-log10(p-value)"), xaxis=list(title="Fold Change (KO/WT)") )
plot_ly(
muscle, x = ~fold.change, y = ~-log10( `p-value`),
# Hover text:
text = ~Protein,
color = ~expression, colors=cbbPalette[1:3]) %>% layout(title="Muscle", yaxis=list(title="-log10(p-value)"), xaxis=list(title="Fold Change (KO/WT)") )
plot_ly(
muscle, x = ~fold.change, y = ~-log10( `p-value`),
# Hover text:
text = ~Protein,
color = ~expression, colors=cbbPalette[1:2]) %>% layout(title="Muscle", yaxis=list(title="-log10(p-value)"), xaxis=list(title="Fold Change (KO/WT)") )
plot_ly(
heart, x = ~fold.change, y = ~-log10( `p-value`),
# Hover text:
text = ~Protein,
color = ~expression, colors=cbbPalette[1:2]) %>% layout(title="Heart", yaxis=list(title="-log10(p-value)"), xaxis=list(title="Fold Change (KO/WT)") )
plot_ly(
muscle, x = ~fold.change, y = ~-log10( `p-value`),
# Hover text:
text = ~Protein,
color = ~expression, colors=cbbPalette[1:2]) %>% layout(title="Muscle", yaxis=list(title="-log10(p-value)"), xaxis=list(title="Fold Change (KO/WT)") )
library(here)
data <- "/Users/aditharun/Dropbox/cfdna_origins/rcfDNA/output/supp_tables.xlsx"
library(tidyverse)
library(readxl)
data <- read_excel(data, sheet=5)
data
data <- data[-1,]
data
colnames(data) <- data[1,]
data <- data[-1,]
data
as.numeric(data)
data
type.convert(data)
type.convert(data, as.is=TRUE)
data <- type.convert(data, as.is=TRUE)
data %>% select(Patient, Tumor, `DELFI Score`, MAF) %>% pivot_longer(-Patient, values_to="val", names_to="metric")
fdata <- data %>% select(Patient, Tumor, `DELFI Score`, MAF) %>% pivot_longer(-Patient, values_to="val", names_to="metric")
fdata
fdata <- data %>% select(Patient, Tumor, `DELFI Score`, MAF) %>% pivot_longer(-c(Patient, MAF), values_to="val", names_to="metric")
fdata
ggplot(fdata, aes(x=MAF, y=val)) + facet_wrap(~metric) + geom_point() + geom_abline(slope = 1, intercept=0)
ggplot(fdata, aes(x=MAF, y=val)) + facet_wrap(~metric) + geom_point() + geom_abline(slope = 1, intercept=0) + theme_bw()
ggplot(fdata, aes(x=MAF, y=val)) + facet_wrap(~metric) + geom_point() + geom_abline(slope = 1, intercept=0) + theme_bw() + ylab("Value")
fdata <- data %>% select(Patient, Tumor, `DELFI Score`, MAF) %>% dplyr::rename('Tumor DFDBayes Estimate'=Tumor) %>% pivot_longer(-c(Patient, MAF), values_to="val", names_to="metric")
fdata
ggplot(fdata, aes(x=MAF, y=val)) + facet_wrap(~metric) + geom_point() + geom_abline(slope = 1, intercept=0) + theme_bw() + ylab("Value")
ggplot(fdata, aes(x=MAF, y=val)) + facet_wrap(~metric) + geom_point()  + theme_bw() + ylab("Value")
installed.packages()
installed.packages() %>% tibble::as_tibble()
library(magrittr)
installed.packages() %>% tibble::as_tibble()
installed.packages() %>% tibble::as_tibble() %>% pull(Package)
installed.packages() %>% tibble::as_tibble() %>% pull(Package)
installed.packages() %>% tibble::as_tibble() %>% dplyr::pull(Package)
1.01^1.01^1.01
1.01^1.01^1.01^1.01
ln(2)^(ln2)
x <- ln(2)
x <- log(2)
x
install.packages("tidyquant")
rdn <- tq_get('RDFN',
from = "2018-01-01",
to = "2021-08-13",
get = "stock.prices")
z <- tq_get('Z',
from = "2018-01-01",
to = "2021-08-13",
get = "stock.prices")
library(tidyverse)
library(tidyquant)
rdn <- tq_get('RDFN',
from = "2018-01-01",
to = "2021-08-13",
get = "stock.prices")
z <- tq_get('Z',
from = "2018-01-01",
to = "2021-08-13",
get = "stock.prices")
rdfn <- rdn
rdfn
z
ggplot(aes(x=date, y=close)) + geom_point(size=2) + geom_line() + theme_bw()
ggplot(z, aes(x=date, y=close)) + geom_point(size=2) + geom_line() + theme_bw()
rbind(z, rdfn) %>% ggplot(aes(x=date, y=close, color=symbol)) + geom_point(size=2) + geom_line() + theme_bw()
corr(z$close, rdfn$close)
cor(z$close, rdfn$close)
cor(z$close, rdfn$close)
aapl <- tq_get('AAPL',
from = "2018-01-01",
to = "2021-08-13",
get = "stock.prices")
cor(z$close, aapl$close)
library(tidyverse)
?geom_tile
df <- data.frame(
x = rep(c(2, 5, 7, 9, 12), 2),
y = rep(c(1, 2), each = 5),
z = factor(rep(1:5, each = 2)),
w = rep(diff(c(0, 4, 6, 8, 10, 14)), 2)
)
df
ggplot(df, aes(x, y)) +
geom_tile(aes(fill = z), colour = "grey50")
n <- 3
matrix(nrow=n, ncol=3) %>% as_tibble()
matrix(nrow=n, ncol=3, 0) %>% as_tibble()
tot <- 2*n - 1
matrix(nrow=tot, ncol=tot, 0) %>% as_tibble()
tot <- 2*n - 1
seq(2, tot, 2)
?geom_rect()
ggplot(df, aes(xmin = x - w / 2, xmax = x + w / 2, ymin = y, ymax = y + 1)) +
geom_rect(aes(fill = z), colour = "grey50")
df
seq(2, tot, 2)
rep(seq(2, tot, 2), tot)
columns <- rep(seq(2, tot, 2), tot)
columns
length(columns)
tot
rep(c(1:tot), each=2)
rep(seq(2, tot, 2), tot)
!c(1:tot) %in% unique(grid.column.x)
grid.column.x <- rep(seq(2, tot, 2), tot)
grid.column.y <- rep(c(1:tot), each=2)
grid.row.x <- !c(1:tot) %in% unique(grid.column.x)
grid.row.x
setdiff(c(1:tot), unique(grid.column.x))
grid.row.x <- setdiff(c(1:tot), unique(grid.column.x))
grid.row.x
grid.column.x
grid.column.x <- rep(seq(2, tot, 2), tot)
grid.column.y <- rep(c(1:tot), each=n-1)
grid.column.x
grid.column.y
grid.row.x <- rep(setdiff(c(1:tot), unique(grid.column.x)), n-1)
grid.column.x <- rep(seq(2, tot, 2), n-1)
grid.column.x
grid.column.x <- rep(seq(2, tot, 2), tot)
grid.column.y <- rep(c(1:tot), each=n-1)
grid.row.x <- rep(setdiff(c(1:tot), unique(grid.column.x)), n-1)
grid.row.y <- rep(seq(2, tot, 2), n-1)
grid.row.y
grid.row.x
grid.row.x <- rep(setdiff(c(1:tot), unique(grid.column.x)), n-1)
grid.row.y <- rep(seq(2, tot, 2), each=n)
grid.row.x
grid.row.y
data <- matrix(nrow=tot^2, ncol=4) %>% as_tibble()
colnames(data) <- c("x", "y", "fill", "expand")
grid.column.x <- rep(seq(2, tot, 2), tot)
grid.column.y <- rep(c(1:tot), each=n-1)
grid.row.x <- rep(setdiff(c(1:tot), unique(grid.column.x)), n-1)
grid.row.y <- rep(seq(2, tot, 2), each=n)
borders.x <- c(grid.column.x, grid.row.x)
borders.y <- c(grid.column.y, grid.row.y)
data$x[1:length(borders.x)] <- borders.x
data$y[1:length(borders.y)] <- borders.y
data$fill[1:length(borders.y)] <- "black"
data$expand[1:length(borders.y)] <- 1
data
expand.factor <- 2
data <- matrix(nrow=tot^2, ncol=4) %>% as_tibble()
colnames(data) <- c("x", "y", "fill", "expand")
data$expand <- expand.factor
grid.column.x <- rep(seq(2, tot, 2), tot)
grid.column.y <- rep(c(1:tot), each=n-1)
grid.row.x <- rep(setdiff(c(1:tot), unique(grid.column.x)), n-1)
grid.row.y <- rep(seq(2, tot, 2), each=n)
borders.x <- c(grid.column.x, grid.row.x)
borders.y <- c(grid.column.y, grid.row.y)
data$x[1:length(borders.x)] <- borders.x
data$y[1:length(borders.y)] <- borders.y
data$fill[1:length(borders.y)] <- "black"
data$expand[1:length(borders.y)] <- 1
data
tail(data)
data %>% as.data.frame()
25-17+1
squares <- setdiff(c(1:tot), unique(grid.column.x))
squares
begin <- length(borders.y) + 1
end <- nrow(data)
squares <- setdiff(c(1:tot), unique(grid.column.x))
xcoord <- rep(sqaures, n)
ycoord <- rep(squares, each=n)
data$x[begin:end] <- xcoord
data$y[begin:end] <- ycoord
squares
squares <- setdiff(c(1:tot), unique(grid.column.x))
xcoord <- rep(squares, n)
ycoord <- rep(squares, each=n)
data$x[begin:end] <- xcoord
data$y[begin:end] <- ycoord
data
end-begin+1
data$fill[begin:end] <- sample(c("red", "blue"), replace=TRUE, size=n^2)
ggplot(data, aes(xmin = x - expand / 2, xmax = x + expand / 2, ymin = y - expand/2, ymax = y + expand /2)) +
geom_rect(aes(fill = fill), colour = "grey50") + theme_bw()
data
data$expand <- 2
ggplot(data, aes(xmin = x - expand / 2, xmax = x + expand / 2, ymin = y - expand/2, ymax = y + expand/2)) +
geom_rect(aes(fill = fill), colour = "grey50") + theme_bw()
data
data
tail(data)
ggplot(data, aes(xmin = x , xmax = x , ymin = y , ymax = y )) +
geom_rect(aes(fill = fill), colour = "grey50") + theme_bw()
ggplot(data, aes(x=x,y=y,fill=fill)) +
geom_rect(aes(fill = fill), colour = "grey50") + theme_bw()
ggplot(data, aes(x=x,y=y,fill=fill)) + geom_tile() + theme_bw()
data
ggplot(data, aes(x=x,y=y,fill=fill)) + geom_tile() + theme_bw()
n <- 5
#Create a data frame of this size
tot <- 2*n - 1
expand.factor <- 2
data <- matrix(nrow=tot^2, ncol=4) %>% as_tibble()
colnames(data) <- c("x", "y", "fill", "expand")
data$expand <- expand.factor
grid.column.x <- rep(seq(2, tot, 2), tot)
grid.column.y <- rep(c(1:tot), each=n-1)
grid.row.x <- rep(setdiff(c(1:tot), unique(grid.column.x)), n-1)
grid.row.y <- rep(seq(2, tot, 2), each=n)
borders.x <- c(grid.column.x, grid.row.x)
borders.y <- c(grid.column.y, grid.row.y)
data$x[1:length(borders.x)] <- borders.x
data$y[1:length(borders.y)] <- borders.y
data$fill[1:length(borders.y)] <- "black"
data$expand[1:length(borders.y)] <- 1
begin <- length(borders.y) + 1
end <- nrow(data)
squares <- setdiff(c(1:tot), unique(grid.column.x))
xcoord <- rep(squares, n)
ycoord <- rep(squares, each=n)
data$x[begin:end] <- xcoord
data$y[begin:end] <- ycoord
squares <- setdiff(c(1:tot), unique(grid.column.x))
xcoord <- rep(squares, n)
ycoord <- rep(squares, each=n)
data$x[begin:end] <- xcoord
data$y[begin:end] <- ycoord
data$fill[begin:end] <- sample(c("red", "blue"), replace=TRUE, size=n^2)
data$expand <- 2
ggplot(data, aes(x=x,y=y,fill=fill)) +
geom_rect(aes(fill = fill), colour = "grey50") + theme_bw()
at
data
ggplot(data, aes(x=x,y=y,fill=fill)) +
geom_rect(aes(fill = fill), colour = "dgrey50") + theme_bw()
ggplot(data, aes(x=x,y=y,fill=fill)) +
geom_tile(aes(fill = fill), colour = "dgrey50") + theme_bw()
ggplot(data, aes(x=x,y=y,fill=fill)) +
geom_tile(aes(fill = fill), colour = "grey") + theme_bw()
setwd("~/Documents/correlated-drug-action/raw-data/clinical_trials/")
library(readxl)
library(writexl)
library(tidyverse)
#non-placebo files
files <- list.files(recursive = TRUE, pattern="*.csv")
f <- files[!grepl("PL",files)]
n.trials <- length(f) / 3
linear.approx <- function(data, interval){
res <- approx(data$time, data$pfs, seq(0, tail(data$time, n=1), interval))
res$y[which(is.na(res$y))] <- 100
return(list(x=res$x, y=res$y))
}
interval <- 0.01
store <- list()
for (i in 1:n.trials){
tmp <- list()
names <- list()
for (k in 0:2){
ind <- 3*i - k
data <- read_csv(f[ind], col_names = FALSE)
colnames(data) <- c("time", "pfs")
data <- linear.approx(data, interval)
tmp[[(k+1)]] <- data
names[[(k+1)]] <- str_sub(basename(f[ind]), 1, -5)
}
val <- min(tail(tmp[[1]]$x, n=1), tail(tmp[[2]]$x, n=1), tail(tmp[[3]]$x, n=1))
tmp[[1]]$y <- tmp[[1]]$y[tmp[[1]]$x < val]
tmp[[2]]$y <- tmp[[2]]$y[tmp[[2]]$x < val]
tmp[[3]]$y <- tmp[[3]]$y[tmp[[3]]$x < val]
tmp[[1]]$x <- tmp[[1]]$x[tmp[[1]]$x < val]
tib <- as_tibble(data.frame(A.x=tmp[[1]]$x, A.y=tmp[[1]]$y, B.y=tmp[[2]]$y, AB.y=tmp[[3]]$y))
tib <- tib %>% mutate_at(vars(-A.x), ~./100)
colnames(tib) <- c("time", unlist(names))
store[[i]] <- tib
}
trials <- list.dirs(full.names = FALSE)[-1]
trial.num <- lapply(str_split( trials, "-"), function(x) x[1]) %>% unlist() %>% as.numeric()
correctorder <- read_excel("../../figures/supplement/Supplemental Table 1.xlsx")
names(store) <- lapply(trial.num, function(j) correctorder %>% filter(`Trial ID` == j) %>% pull(`Combination Name`) %>% paste0(j, "-" ,.)) %>% unlist()
store <- c(store[1], store[11:18], store[2:10])
writexl::write_xlsx(store, col_names=TRUE, "../../figures/supplement/Supplemental File 1.xlsx")
store[[3]]
setwd("~/Documents/correlated-drug-action/raw-data/clinical_trials/")
library(readxl)
library(writexl)
library(tidyverse)
#non-placebo files
files <- list.files(recursive = TRUE, pattern="*.csv")
f <- files[!grepl("PL",files)]
n.trials <- length(f) / 3
linear.approx <- function(data, interval){
res <- approx(data$time, data$pfs, seq(0, tail(data$time, n=1), interval))
res$y[which(is.na(res$y))] <- 100
return(list(x=res$x, y=res$y))
}
interval <- 0.01
store <- list()
for (i in 1:n.trials){
tmp <- list()
names <- list()
for (k in 0:2){
ind <- 3*i - k
data <- read_csv(f[ind], col_names = FALSE)
colnames(data) <- c("time", "pfs")
data <- linear.approx(data, interval)
tmp[[(k+1)]] <- data
names[[(k+1)]] <- str_sub(basename(f[ind]), 1, -5)
}
val <- min(tail(tmp[[1]]$x, n=1), tail(tmp[[2]]$x, n=1), tail(tmp[[3]]$x, n=1))
tmp[[1]]$y <- tmp[[1]]$y[tmp[[1]]$x < val]
tmp[[2]]$y <- tmp[[2]]$y[tmp[[2]]$x < val]
tmp[[3]]$y <- tmp[[3]]$y[tmp[[3]]$x < val]
tmp[[1]]$x <- tmp[[1]]$x[tmp[[1]]$x < val]
tib <- as_tibble(data.frame(A.x=tmp[[1]]$x, A.y=tmp[[1]]$y, B.y=tmp[[2]]$y, AB.y=tmp[[3]]$y))
tib <- tib %>% mutate_at(vars(-A.x), ~./100)
colnames(tib) <- c("time", unlist(names))
store[[i]] <- tib
}
store
i <- 12
tmp <- list()
names <- list()
for (k in 0:2){
ind <- 3*i - k
data <- read_csv(f[ind], col_names = FALSE)
colnames(data) <- c("time", "pfs")
data <- linear.approx(data, interval)
tmp[[(k+1)]] <- data
names[[(k+1)]] <- str_sub(basename(f[ind]), 1, -5)
}
val <- min(tail(tmp[[1]]$x, n=1), tail(tmp[[2]]$x, n=1), tail(tmp[[3]]$x, n=1))
tmp[[1]]$y <- tmp[[1]]$y[tmp[[1]]$x < val]
tmp[[2]]$y <- tmp[[2]]$y[tmp[[2]]$x < val]
tmp[[3]]$y <- tmp[[3]]$y[tmp[[3]]$x < val]
tmp[[1]]$x <- tmp[[1]]$x[tmp[[1]]$x < val]
val
tmp[[1]]
tmp[[2]]
tmp[[3]]
ind
k <- 0
ind <- 3*i - k
data <- read_csv(f[ind], col_names = FALSE)
data
colnames(data) <- c("time", "pfs")
data <- linear.approx(data, interval)
data
tmp[[(k+1)]] <- data
names[[(k+1)]] <- str_sub(basename(f[ind]), 1, -5)
tmp
tmp[[34]]
ind
tmp[[(1)]]
tmp <- list()
names <- list()
for (k in 0:2){
ind <- 3*i - k
data <- read_csv(f[ind], col_names = FALSE)
colnames(data) <- c("time", "pfs")
data <- linear.approx(data, interval)
tmp[[(k+1)]] <- data
names[[(k+1)]] <- str_sub(basename(f[ind]), 1, -5)
}
tmp
k <-
1
ind <- 3*i - k
data <- read_csv(f[ind], col_names = FALSE)
colnames(data) <- c("time", "pfs")
data
data <- linear.approx(data, interval)
tmp[[(k+1)]] <- data
names[[(k+1)]] <- str_sub(basename(f[ind]), 1, -5)
data
data
data <- read_csv(f[ind], col_names = FALSE)
colnames(data) <- c("time", "pfs")
data
tail(data$time,n=1)
setwd("~/Documents/correlated-drug-action/raw-data/clinical_trials/")
library(readxl)
library(writexl)
library(tidyverse)
#non-placebo files
files <- list.files(recursive = TRUE, pattern="*.csv")
f <- files[!grepl("PL",files)]
n.trials <- length(f) / 3
linear.approx <- function(data, interval){
res <- approx(data$time, data$pfs, seq(0, max(data$time), interval))
res$y[which(is.na(res$y))] <- 100
return(list(x=res$x, y=res$y))
}
interval <- 0.01
store <- list()
for (i in 1:n.trials){
tmp <- list()
names <- list()
for (k in 0:2){
ind <- 3*i - k
data <- read_csv(f[ind], col_names = FALSE)
colnames(data) <- c("time", "pfs")
data <- linear.approx(data, interval)
tmp[[(k+1)]] <- data
names[[(k+1)]] <- str_sub(basename(f[ind]), 1, -5)
}
val <- min(tail(tmp[[1]]$x, n=1), tail(tmp[[2]]$x, n=1), tail(tmp[[3]]$x, n=1))
tmp[[1]]$y <- tmp[[1]]$y[tmp[[1]]$x < val]
tmp[[2]]$y <- tmp[[2]]$y[tmp[[2]]$x < val]
tmp[[3]]$y <- tmp[[3]]$y[tmp[[3]]$x < val]
tmp[[1]]$x <- tmp[[1]]$x[tmp[[1]]$x < val]
tib <- as_tibble(data.frame(A.x=tmp[[1]]$x, A.y=tmp[[1]]$y, B.y=tmp[[2]]$y, AB.y=tmp[[3]]$y))
tib <- tib %>% mutate_at(vars(-A.x), ~./100)
colnames(tib) <- c("time", unlist(names))
store[[i]] <- tib
}
trials <- list.dirs(full.names = FALSE)[-1]
trial.num <- lapply(str_split( trials, "-"), function(x) x[1]) %>% unlist() %>% as.numeric()
correctorder <- read_excel("../../figures/supplement/Supplemental Table 1.xlsx")
names(store) <- lapply(trial.num, function(j) correctorder %>% filter(`Trial ID` == j) %>% pull(`Combination Name`) %>% paste0(j, "-" ,.)) %>% unlist()
store <- c(store[1], store[11:18], store[2:10])
writexl::write_xlsx(store, col_names=TRUE, "../../figures/supplement/Supplemental File 1.xlsx")
