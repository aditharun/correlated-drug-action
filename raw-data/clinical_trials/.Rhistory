mult.mean <- mean(extract.z$value*extract.b2$value)
tumor.derived <- which(extract.z$value==1)
cond.exp <- mean(extract.b2$value[tumor.derived])
cond.exp
mult.mean
mean(extract.b2$value)
ci(extract.b2$value)
ggs_density(samples)
mean(extract.b2$value)
sd(extract.b2$value)
sd(extract.b2$value) / sqrt(length(extract.b2$value))
mean(extract.b2$value) + 2.58*0.0006725768
ggs_histogram(samples)
sd(extract.b2$value)
0.05 - mean(extract.b2$value)
0.00500826/sd(extract.b2$value)
0.05/0.02
samples
5000/5
length(extract.b2$value)
mode(c(1,2,3,4))
file.path("test", "deacon")
write.csv("/Users/aditharun/Desktop/test.csv", as.data.frame(matrix(0,5,5)), append=TRUE)
write.table("/Users/aditharun/Desktop/test.csv", as.data.frame(matrix(0,5,5)), append=TRUE)
write.table( as.data.frame(matrix(0,5,5)), "/Users/aditharun/Desktop/test.csv", append=TRUE)
read.table("/Users/aditharun/Desktop/test.csv",)
read.table("/Users/aditharun/Desktop/test.csv")
x <- read.table("/Users/aditharun/Desktop/test.csv")
x
x[2,3] <- 5
write.table(x, "/Users/aditharun/Desktop/test.csv", append=FALSE)
read.table("/Users/aditharun/Desktop/test.csv")
log.status <- "log"
intercept.status <- "nint"
paste0(log.status,intercept.status)
str_count("lognint", "n")
grep("login", "nlogint")
grepl("login", "nlogint")
y <- c(6,7)
y <- c(3,4)
x[2,y] <- c(5,6)
x
x[5,y] <- c(5,6)
x
f <- c(1:26238)
f
f <- 26238
26238/100
seq(1,100,10)
seq(1,26200,10)
seq(1,26200,100)
201 -102
p <- seq(1,26200,100)
p[1] <- 0
p
tail(p,1)
tail(p,1) <- 26238
p[length(p])]
p[length(p)]
p[length(p)] <- 26238
p
samples
data
##setwd("/dcl01/scharpf1/data/aarun/deconvolution/code/models")
lambdas <- c(300, 400, 500)
nbins <- 1000
wbc <- rpois(nbins, lambdas[1])
normal <- rpois(nbins, lambdas[2])
tumor <- rpois(nbins, lambdas[3])
tf.nf <- c(0.05, 0.1)
p <- c(tf.nf, 1-sum(tf.nf))
##
## Assumes same normal/tumor/wbc contribution across all bins
##
plasma_means <- p[1]*normal + p[2]*tumor + p[3]*wbc
plasma <- rpois(nbins, plasma_means)
dat <- tibble(y=plasma,
wbc=wbc,
normal=normal,
tumor=tumor,
mixture=plasma_means)
data <- data.frame(wbc=wbc, normal=normal)
data
gather(data, "type", "value")
dim(data)
data$r <- c(1:1000)
gather(data, "type", "value")
as_tibble(gather(data, "type","num"))
as_tibble(data)
execute <- function(input, last.year=last.year, today=today, ss=ss){
x.raw <- getSymbols(as.character(input),from=last.year, to=today, auto.assign=FALSE)
date <- index(x.raw)
x <- x.raw %>% fortify.zoo %>% as_tibble()
x$Index <- as.character(x$Index)
get.sector <- ss %>% filter(Symbol==input) %>% slice(1)
covid.drop.dates <- c("2020-02-03", "2020-04-06")
rows <- which(x$Index %in% covid.drop.dates)
covid.range <- x %>% slice(rows[1]:rows[2])
cols <- colnames(x)
min.value <- covid.range %>% arrange(!!as.name(cols[4])) %>% slice(1)
lowest.point <- min.value %>% pull(!!as.name(cols[4]))
date.of.low <- min.value %>% pull(Index)
curr.price <- tail(x,1) %>% pull(!!as.name(cols[5]))
yearly.high <- x %>% arrange(desc(!!as.name(cols[3]))) %>% slice(1)
date.of.yearly.high <- yearly.high %>% pull(Index)
high.value <- yearly.high %>% pull(!!as.name(cols[3]))
percent.from.high <- round ( ((curr.price - high.value) / high.value)*100, 2)
percent.from.low <- round( ((curr.price - lowest.point) / lowest.point)*100, 2)
name <- paste0("Sector: ", get.sector$Sector, ", Industry: ", get.sector$Industry)
price <- pull(x,7)
x.chart <- ggplot(x, aes(x=date, y=price)) + geom_line(color="darkblue") + xlab("Date") + ylab("Price") + ggtitle(name) +  theme_bw() + scale_x_date(date_labels = "%b %y", date_breaks = "1 months")
x.chart <- ggplotly(x.chart)
return(list(chart=x.chart, low=percent.from.low, high=percent.from.high))
}
execute("SPY", last.year, today)
library(quantmod)
library(tidyverse)
library(TTR)
library(plotly)
ss <- stockSymbols()
ss <- as_tibble(ss)
today <- Sys.Date()
split.date <- unlist(str_split(today, "-"))
adjust.date <- as.numeric(split.date[1])
split.date[1] <- as.character(adjust.date-1)
last.year <- paste0(split.date, collapse="-")
input <- "SPY"
x.raw <- getSymbols(as.character(input),from=last.year, to=today, auto.assign=FALSE)
date <- index(x.raw)
x <- x.raw %>% fortify.zoo %>% as_tibble()
x$Index <- as.character(x$Index)
x
input <- "XLE"
x.raw <- getSymbols(as.character(input),from=last.year, to=today, auto.assign=FALSE)
date <- index(x.raw)
x <- x.raw %>% fortify.zoo %>% as_tibble()
x$Index <- as.character(x$Index)
x
execute("PHILZ", last.year, today)
shiny::runApp('Desktop/stock')
runApp('Desktop/stock')
runApp('Desktop/stock')
x.raw <- getSymbols(as.character("SPAY"),from=last.year, to=today, auto.assign=FALSE)
x.raw <- getSymbols(as.character("SPY"),from=last.year, to=today, auto.assign=FALSE)
x.raw
runApp('Desktop/stock')
runApp('Desktop/stock')
trials <- c("a", "b", "c", "d", "e", "f")
data <- data.frame(trials=trials)
data
data
data$true <- c(2,5,4,3,1)
data$true <- c(2,5,4,3,1,6)
dat
data
data
data$guess <- c(2,5,4,3,1,)
data$guess <- c(2,5,4,3,1,6)
data
plot(data$true, data$guess)
data$guess <- c(3,4,1,2,5,6)
plot(data$true, data$guess)
dirname(sys.frame(1)$ofile)
c <- c(4,5,6)
d <- c(3,4,5)
c*d
c + d - c*d
4 + 3 - 12
r <- list(c(1,2), c(3,4), c(5,6))
r
do.call(rbind, r)
cor(c(1,2,3), c(1,2,3), method="spearman")
cor.test(c(1,2,3), c(1,2,3), method="spearman")
cor.test(c(1,2,3), c(1,2,3), method="spearman")$p.value
cor.test(c(1,2,3), c(1,2,3), method="spearman")$rho
cor.test(c(1,2,3), c(1,2,3), method="spearman")$statistic
str(cor.test(c(1,2,3), c(1,2,3), method="spearman"))
cor.test(c(1,2,3), c(1,2,3), method="spearman")$parameter
cor.test(c(1,2,3), c(1,2,3), method="spearman")$estimate
unname(cor.test(c(1,2,3), c(1,2,3), method="spearman")$estimate)
cor.test(c(1,2,3), c(1,2,3), method="spearman")$p.value
cor.test(c(1:45), c(1:45), method="spearman")
cor.test(c(1:18), c(1:18), method="spearman")
setwd("/Users/aditharun/Documents/combination-cancer-therapy/2-raw-data/Clinical_trials/")
list.dirs()
list.dirs(recursive=FALSE)
list.dirs(recursive=FALSE)[1]
list.dirs(recursive=FALSE)[10]
name <- list.dirs(recursive=FALSE)[10]
name
data <- datafile.path(name, "data.rds")
data <- file.path(name, "data.rds")
data
data <- readRDS(data)
name <- list.dirs(recursive=FALSE, full.names=TRUE)[10]
data <- file.path(name, "data.rds")
data <- readRDS(data)
data <- file.path("../../new_devel/temp/18-carf.rd.meyloma", "data.rds")
data <- readRDS(data)
tib <- data$data
num.pts.AB <- 100
y <- 1 - y
y <- tib$drugAB
y <- 1 - y
interval <- 1/100
x <- tib$time
finer.res <- approx(x, y, seq(0, max(x), interval))
y <- finer.res$y
x <- finer.res$x
y[is.na(y)] <- 0
plot(x, y)
plot(x, 1-y)
lines(tib$time, tib)
lines(tib$time, tib$drugAB)
lines(tib$time, tib$drugAB, col="green")
n <- 100
pts <- runif(n)
min(x)
min(y)
max(y)
runif(100, 0, 0.3)
pts <- runif(n, 0, upper.limit)
upper.limit <- max(y)
pts <- runif(n, 0, upper.limit)
x.pts <- unlist(lapply(pts, function(t) which.min(abs(t-y))))
samples <- x[x.pts]
samples <- sort(samples)
surv <- (length(samples) - seq_along(samples)) / length(samples)
out <- data.frame(time=samples, pfs=surv)
lines(out$time, out$pfs, col="red")
plot(tib$time, tib$drugAB, col="green")
plot(tib$time, tib$drugAB, col="green", type="l")
lines(out$time, out$pfs, col="red")
pts <- runif(n, 0, 1)
x.pts <- unlist(lapply(pts, function(t) which.min(abs(t-y))))
samples <- x[x.pts]
samples <- sort(samples)
surv <- (length(samples) - seq_along(samples)) / length(samples)
out <- data.frame(time=samples, pfs=surv)
lines(out$time, out$pfs, col="red")
out <- as_tibble(out)
library(tidyverse)
out <- as_tibble(out)
out
tail(out)
upper.limit
out %>% filter(pfs < (1-0.31))
out %>% filter(pfs > (1-0.31))
i <- out %>% filter(pfs > (1-0.31))
lines(i$time, i$pfs, col="blue")
finer.res <- approx(x, y, seq(0, max(x), interval))
y <- finer.res$y
x <- finer.res$x
y[is.na(y)] <- 0
upper.limit <- max(y)
pts <- runif(n, 0, upper.limit)
x.pts <- unlist(lapply(pts, function(t) which.min(abs(t-y))))
samples <- x[x.pts]
samples <- sort(samples)
surv <- (length(samples) - seq_along(samples)) / length(samples)
out <- data.frame(time=samples, pfs=surv)
out <- as_tibble(out)
out
finer.res <- approx(x, y, seq(0, max(x), interval))
y <- finer.res$y
x <- finer.res$x
y[is.na(y)] <- 0
upper.limit <- max(y)
pts <- runif(200, 0, upper.limit)
x.pts <- unlist(lapply(pts, function(t) which.min(abs(t-y))))
samples <- x[x.pts]
samples <- sort(samples)
surv <- (length(samples) - seq_along(samples)) / length(samples)
out <- data.frame(time=samples, pfs=surv)
out <- as_tibble(out)
finer.res <- approx(x, y, seq(0, max(x), interval))
y <- finer.res$y
x <- finer.res$x
y[is.na(y)] <- 0
upper.limit <- max(y)
pts <- runif(200, 0, 1)
x.pts <- unlist(lapply(pts, function(t) which.min(abs(t-y))))
samples <- x[x.pts]
samples <- sort(samples)
surv <- (length(samples) - seq_along(samples)) / length(samples)
out <- data.frame(time=samples, pfs=surv)
out <- as_tibble(out)
lines(out$time, out$pfs, col="purple")
out %>% filter(pfs < 0.7)
out %>% filter(pfs > 0.7)
200*0.3
100/0.3
finer.res <- approx(x, y, seq(0, max(x), interval))
y <- finer.res$y
x <- finer.res$x
y[is.na(y)] <- 0
upper.limit <- max(y)
pts <- runif(33, 0, 1)
x.pts <- unlist(lapply(pts, function(t) which.min(abs(t-y))))
samples <- x[x.pts]
finer.res <- approx(x, y, seq(0, max(x), interval))
y <- finer.res$y
x <- finer.res$x
y[is.na(y)] <- 0
upper.limit <- max(y)
pts <- runif(333, 0, 1)
x.pts <- unlist(lapply(pts, function(t) which.min(abs(t-y))))
samples <- x[x.pts]
samples <- sort(samples)
surv <- (length(samples) - seq_along(samples)) / length(samples)
out <- data.frame(time=samples, pfs=surv)
out <- as_tibble(out)
lines(out$time, out$pfs, col="purple")
finer.res <- approx(x, y, seq(0, max(x), interval))
y <- finer.res$y
x <- finer.res$x
y[is.na(y)] <- 0
upper.limit <- max(y)
pts <- runif(333, 0, upper.limit)
x.pts <- unlist(lapply(pts, function(t) which.min(abs(t-y))))
samples <- x[x.pts]
lines(ecdf(samples))
lines(1-ecdf(samples))
finer.res <- approx(x, y, seq(0, max(x), interval))
y <- finer.res$y
x <- finer.res$x
y[is.na(y)] <- 0
upper.limit <- max(y)
pts <- runif(333, 0, 1)
x.pts <- unlist(lapply(pts, function(t) which.min(abs(t-y))))
samples <- x[x.pts]
lines(1-ecdf(samples))
lines(ecdf(samples))
lines(ecdf(samples), col="blue")
\
finer.res <- approx(x, y, seq(0, max(x), interval))
y <- finer.res$y
x <- finer.res$x
y[is.na(y)] <- 0
upper.limit <- max(y)
pts <- runif(333, 0, upper.limit)
x.pts <- unlist(lapply(pts, function(t) which.min(abs(t-y))))
samples <- x[x.pts]
liens(samples, pts, col="red")
lines(samples, pts, col="red")
lines(samples, pts, col="red", pch=17)
lines(samples, pts,  pch=17)
plot(tib$time, tib$drugAB, col="red", type=";")
plot(tib$time, tib$drugAB, col="red", type="l")
lines(samples, pts,  pch=17)
lines(samples, pts, col="black")
samples
pts
lines(samples, 1-pts, col="black")
test <- data.frame(x=samples, y=1-pts)
plot(test$x, test$y)
lines(tib$time, tib$drugAB, col="red")
finer.res <- approx(x, y, seq(0, max(x), interval))
y <- finer.res$y
x <- finer.res$x
y[is.na(y)] <- 0
upper.limit <- max(y)
pts <- runif(333, 0,1)
x.pts <- unlist(lapply(pts, function(t) which.min(abs(t-y))))
samples <- x[x.pts]
test <- data.frame(x=samples, y=1-pts)
plot(test$x, test$y)
lines(tib$time, tib$drugAB, col="red")
samples <- sort(samples)
surv <- (length(samples) - seq_along(samples)) / length(samples)
out <- data.frame(time=samples, pfs=surv)
out <- as_tibble(out)
lines(out$time, out$pfs, col="green")
max()
max(y)
sample.from.cdf <- function(x, y, n, interval=interval, sim.prep=FALSE){
upper.limit <- max(y)
y <- 1 - y
finer.res <- approx(x, y, seq(0, max(x), interval))
y <- finer.res$y
x <- finer.res$x
y[is.na(y)] <- 0
pts <- runif(n, 0, 1)
x.pts <- unlist(lapply(pts, function(t) which.min(abs(t-y))))
samples <- x[x.pts]
samples <- sort(samples)
surv <- (length(samples) - seq_along(samples)) / length(samples)
out <- data.frame(time=samples, pfs=surv)
out <- as_tibble(out)
out <- out %>% filter(time >= upper.limit)
if (sim.prep){
return(out$time)
}
return(out)
}
resamp <- lapply(1:n, function(x) sample.from.cdf(time, value, pts, 0.005))
√
resamp <- lapply(1:n, function(x) sample.from.cdf(tib$time, tib$drugAB, 300, 0.005))
n
resamp <- lapply(1:3, function(x) sample.from.cdf(tib$time, tib$drugAB, 300, 0.005))
plot(tib$time, tib$drugAB)
lines(resamp[[1]]$time, resamp[[1]]$pfs)
plot(resamp[[1]]$time, resamp[[1]]$pfs)
sample.from.cdf <- function(x, y, n, interval=interval, sim.prep=FALSE){
upper.limit <- max(y)
print(upper.limit)
y <- 1 - y
finer.res <- approx(x, y, seq(0, max(x), interval))
y <- finer.res$y
x <- finer.res$x
y[is.na(y)] <- 0
pts <- runif(n, 0, 1)
x.pts <- unlist(lapply(pts, function(t) which.min(abs(t-y))))
samples <- x[x.pts]
samples <- sort(samples)
surv <- (length(samples) - seq_along(samples)) / length(samples)
out <- data.frame(time=samples, pfs=surv)
out <- as_tibble(out)
out <- out %>% filter(time >= upper.limit)
if (sim.prep){
return(out$time)
}
return(out)
}
resamp <- lapply(1:3, function(x) sample.from.cdf(tib$time, tib$drugAB, 300, 0.005))
sample.from.cdf <- function(x, y, n, interval=interval, sim.prep=FALSE){
upper.limit <- min(y)
print(upper.limit)
y <- 1 - y
finer.res <- approx(x, y, seq(0, max(x), interval))
y <- finer.res$y
x <- finer.res$x
y[is.na(y)] <- 0
pts <- runif(n, 0, 1)
x.pts <- unlist(lapply(pts, function(t) which.min(abs(t-y))))
samples <- x[x.pts]
samples <- sort(samples)
surv <- (length(samples) - seq_along(samples)) / length(samples)
out <- data.frame(time=samples, pfs=surv)
out <- as_tibble(out)
out <- out %>% filter(time >= upper.limit)
if (sim.prep){
return(out$time)
}
return(out)
}
resamp <- lapply(1:3, function(x) sample.from.cdf(tib$time, tib$drugAB, 300, 0.005))
plot(resamp[[1]]$time, resamp[[1]]$pfs)
sample.from.cdf <- function(x, y, n, interval=interval, sim.prep=FALSE){
upper.limit <- min(y)
y <- 1 - y
finer.res <- approx(x, y, seq(0, max(x), interval))
y <- finer.res$y
x <- finer.res$x
y[is.na(y)] <- 0
pts <- runif(n, 0, 1)
x.pts <- unlist(lapply(pts, function(t) which.min(abs(t-y))))
samples <- x[x.pts]
samples <- sort(samples)
surv <- (length(samples) - seq_along(samples)) / length(samples)
out <- data.frame(time=samples, pfs=surv)
out <- as_tibble(out)
out <- out %>% filter(pfs >= upper.limit)
if (sim.prep){
return(out$time)
}
return(out)
}
resamp <- lapply(1:3, function(x) sample.from.cdf(tib$time, tib$drugAB, 300, 0.005))
plot(resamp[[1]]$time, resamp[[1]]$pfs)
lines(tib$time, tib$drugAB, col="red")
lines(resamp[[2]]$time, resamp[[2]]$pfs, col="green")
lines(resamp[[3]]$time, resamp[[3]]$pfs, col="green")
resamp[[1]]
tib
test <- approx(resamp[[1]]$time, resamp[[1]]$pfs, seq(0, max(tib$time), interval) )
test3 <- data.frame(time=test$x, pfs=test$y)
test3 <- as_tibble(test3)
na.vals <- test3 %>% mutate(k=row_number()) %>% filter(!is.na(pfs)) %>% slice(1, n()) %>% pull(k)
end <- na.vals[2]
dim.type <- dim(test3)[1]
if (end!=dim.type){
test3$pfs[ (na.vals[2]+1): (dim(test3)[1]) ] <- test3$pfs[na.vals[2]]
}
test3$pfs[1:(na.vals[1]-1)] <- 1
lines(test3$time, test3$pfs, col="orange")
censor <- 0.98
cutpt <- max(tib$time)*censor
a <- tib %>% filter(time < cutpt) %>% pull(drugAB)
b <- test3 %>% filter(time < cutpt) %>% pull(pfs)
max(abs(a-b))
comparisons <- resamp[[1]]
comparisons %>% mutate(test=which.min(time-tib$time))
comparisons %>% mutate(test=unlist(lapply(tib$time, function(x) which.min(time-x))))
comparisons %>% mutate(test=unlist(lapply(tib$time, function(x) which.min(time-x))))
comparisons %>% mutate(test=which.min(time-x))
comparisons %>% mutate(test=which.min(abs(time-tib$time)))
unlist(lapply(comparisons$time, function(x) which.min(abs(x-tib$time)))
)
unlist(lapply(comparisons$time, function(x) which.min(abs(x-tib$time))))
tib$time[unlist(lapply(comparisons$time, function(x) which.min(abs(x-tib$time))))]
tib$drugAB[unlist(lapply(comparisons$time, function(x) which.min(abs(x-tib$time))))]
comparisons$pfs - tib$drugAB[unlist(lapply(comparisons$time, function(x) which.min(abs(x-tib$time))))]
max(comparisons$pfs - tib$drugAB[unlist(lapply(comparisons$time, function(x) which.min(abs(x-tib$time))))])
unname(comparisons$time)
comparisons$time
min(1,2)
tib
library(survminer)
library(survival)
install.packages("survminer")
library(survminer)
